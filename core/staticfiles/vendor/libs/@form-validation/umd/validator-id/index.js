/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@form-validation/core/lib/cjs/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@form-validation/core/lib/cjs/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\n/**\n * FormValidation (https://formvalidation.io)\n * The best validation library for JavaScript\n * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n */\n/**\n * Implement Luhn validation algorithm\n * Credit to https://gist.github.com/ShirtlessKirk/2134376\n *\n * @see http://en.wikipedia.org/wiki/Luhn\n * @param {string} value\n * @returns {boolean}\n */\nfunction luhn(value) {\n    var length = value.length;\n    var prodArr = [\n        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n        [0, 2, 4, 6, 8, 1, 3, 5, 7, 9],\n    ];\n    var mul = 0;\n    var sum = 0;\n    while (length--) {\n        sum += prodArr[mul][parseInt(value.charAt(length), 10)];\n        mul = 1 - mul;\n    }\n    return sum % 10 === 0 && sum > 0;\n}\n\n/**\n * FormValidation (https://formvalidation.io)\n * The best validation library for JavaScript\n * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n */\n/**\n * Implement modulus 11, 10 (ISO 7064) algorithm\n *\n * @param {string} value\n * @returns {boolean}\n */\nfunction mod11And10(value) {\n    var length = value.length;\n    var check = 5;\n    for (var i = 0; i < length; i++) {\n        check = ((((check || 10) * 2) % 11) + parseInt(value.charAt(i), 10)) % 10;\n    }\n    return check === 1;\n}\n\n/**\n * FormValidation (https://formvalidation.io)\n * The best validation library for JavaScript\n * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n */\n/**\n * Implements Mod 37, 36 (ISO 7064) algorithm\n *\n * @param {string} value\n * @param {string} [alphabet]\n * @returns {boolean}\n */\nfunction mod37And36(value, alphabet) {\n    if (alphabet === void 0) { alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'; }\n    var length = value.length;\n    var modulus = alphabet.length;\n    var check = Math.floor(modulus / 2);\n    for (var i = 0; i < length; i++) {\n        check = ((((check || modulus) * 2) % (modulus + 1)) + alphabet.indexOf(value.charAt(i))) % modulus;\n    }\n    return check === 1;\n}\n\n/**\n * FormValidation (https://formvalidation.io)\n * The best validation library for JavaScript\n * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n */\nfunction transform(input) {\n    return input\n        .split('')\n        .map(function (c) {\n        var code = c.charCodeAt(0);\n        // 65, 66, ..., 90 are the char code of A, B, ..., Z\n        return code >= 65 && code <= 90\n            ? // Replace A, B, C, ..., Z with 10, 11, ..., 35\n                code - 55\n            : c;\n    })\n        .join('')\n        .split('')\n        .map(function (c) { return parseInt(c, 10); });\n}\nfunction mod97And10(input) {\n    var digits = transform(input);\n    var temp = 0;\n    var length = digits.length;\n    for (var i = 0; i < length - 1; ++i) {\n        temp = ((temp + digits[i]) * 10) % 97;\n    }\n    temp += digits[length - 1];\n    return temp % 97 === 1;\n}\n\n/**\n * FormValidation (https://formvalidation.io)\n * The best validation library for JavaScript\n * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n */\n/**\n * Implement Verhoeff validation algorithm\n * Credit to Sergey Petushkov, 2014\n *\n * @see https://en.wikipedia.org/wiki/Verhoeff_algorithm\n * @param {string} value\n * @returns {boolean}\n */\nfunction verhoeff(value) {\n    // Multiplication table d\n    var d = [\n        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n        [1, 2, 3, 4, 0, 6, 7, 8, 9, 5],\n        [2, 3, 4, 0, 1, 7, 8, 9, 5, 6],\n        [3, 4, 0, 1, 2, 8, 9, 5, 6, 7],\n        [4, 0, 1, 2, 3, 9, 5, 6, 7, 8],\n        [5, 9, 8, 7, 6, 0, 4, 3, 2, 1],\n        [6, 5, 9, 8, 7, 1, 0, 4, 3, 2],\n        [7, 6, 5, 9, 8, 2, 1, 0, 4, 3],\n        [8, 7, 6, 5, 9, 3, 2, 1, 0, 4],\n        [9, 8, 7, 6, 5, 4, 3, 2, 1, 0],\n    ];\n    // Permutation table p\n    var p = [\n        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n        [1, 5, 7, 6, 2, 8, 3, 0, 9, 4],\n        [5, 8, 0, 3, 7, 9, 6, 1, 4, 2],\n        [8, 9, 1, 6, 0, 4, 3, 5, 2, 7],\n        [9, 4, 5, 3, 1, 2, 6, 8, 7, 0],\n        [4, 2, 8, 6, 5, 7, 3, 9, 0, 1],\n        [2, 7, 9, 3, 8, 0, 6, 4, 1, 5],\n        [7, 0, 4, 6, 9, 1, 3, 2, 5, 8],\n    ];\n    // Inverse table inv\n    var invertedArray = value.reverse();\n    var c = 0;\n    for (var i = 0; i < invertedArray.length; i++) {\n        c = d[c][p[i % 8][invertedArray[i]]];\n    }\n    return c === 0;\n}\n\n/**\n * FormValidation (https://formvalidation.io)\n * The best validation library for JavaScript\n * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n */\nvar index$1 = {\n    luhn: luhn,\n    mod11And10: mod11And10,\n    mod37And36: mod37And36,\n    mod97And10: mod97And10,\n    verhoeff: verhoeff,\n};\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\n\r\nfunction __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\n\n/**\n * FormValidation (https://formvalidation.io)\n * The best validation library for JavaScript\n * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n */\n/**\n * @param {HTMLElement} form The form element\n * @param {string} field The field name\n * @param {HTMLElement} element The field element\n * @param {HTMLElement[]} elements The list of elements which have the same name as `field`\n * @return {string}\n */\nfunction getFieldValue(form, field, element, elements) {\n    var type = (element.getAttribute('type') || '').toLowerCase();\n    var tagName = element.tagName.toLowerCase();\n    if (tagName === 'textarea') {\n        return element.value;\n    }\n    if (tagName === 'select') {\n        var select = element;\n        var index = select.selectedIndex;\n        return index >= 0 ? select.options.item(index).value : '';\n    }\n    if (tagName === 'input') {\n        if ('radio' === type || 'checkbox' === type) {\n            var checked = elements.filter(function (ele) { return ele.checked; }).length;\n            return checked === 0 ? '' : checked + '';\n        }\n        else {\n            return element.value;\n        }\n    }\n    return '';\n}\n\n/**\n * FormValidation (https://formvalidation.io)\n * The best validation library for JavaScript\n * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n */\nfunction emitter() {\n    return {\n        fns: {},\n        clear: function () {\n            this.fns = {};\n        },\n        emit: function (event) {\n            var args = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                args[_i - 1] = arguments[_i];\n            }\n            (this.fns[event] || []).map(function (handler) { return handler.apply(handler, args); });\n        },\n        off: function (event, func) {\n            if (this.fns[event]) {\n                var index = this.fns[event].indexOf(func);\n                if (index >= 0) {\n                    this.fns[event].splice(index, 1);\n                }\n            }\n        },\n        on: function (event, func) {\n            (this.fns[event] = this.fns[event] || []).push(func);\n        },\n    };\n}\n\n/**\n * FormValidation (https://formvalidation.io)\n * The best validation library for JavaScript\n * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n */\nfunction filter() {\n    return {\n        filters: {},\n        add: function (name, func) {\n            (this.filters[name] = this.filters[name] || []).push(func);\n        },\n        clear: function () {\n            this.filters = {};\n        },\n        execute: function (name, defaultValue, args) {\n            if (!this.filters[name] || !this.filters[name].length) {\n                return defaultValue;\n            }\n            var result = defaultValue;\n            var filters = this.filters[name];\n            var count = filters.length;\n            for (var i = 0; i < count; i++) {\n                result = filters[i].apply(result, args);\n            }\n            return result;\n        },\n        remove: function (name, func) {\n            if (this.filters[name]) {\n                this.filters[name] = this.filters[name].filter(function (f) { return f !== func; });\n            }\n        },\n    };\n}\n\n/**\n * FormValidation (https://formvalidation.io)\n * The best validation library for JavaScript\n * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n */\nvar Core = /** @class */ (function () {\n    function Core(form, fields) {\n        this.fields = {};\n        this.elements = {};\n        this.ee = emitter();\n        this.filter = filter();\n        this.plugins = {};\n        // Store the result of validation for each field\n        this.results = new Map();\n        this.validators = {};\n        this.form = form;\n        this.fields = fields;\n    }\n    Core.prototype.on = function (event, func) {\n        this.ee.on(event, func);\n        return this;\n    };\n    Core.prototype.off = function (event, func) {\n        this.ee.off(event, func);\n        return this;\n    };\n    Core.prototype.emit = function (event) {\n        var _a;\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        (_a = this.ee).emit.apply(_a, __spreadArray([event], args, false));\n        return this;\n    };\n    Core.prototype.registerPlugin = function (name, plugin) {\n        // Check if whether the plugin is registered\n        if (this.plugins[name]) {\n            throw new Error(\"The plguin \".concat(name, \" is registered\"));\n        }\n        // Install the plugin\n        plugin.setCore(this);\n        plugin.install();\n        this.plugins[name] = plugin;\n        return this;\n    };\n    Core.prototype.deregisterPlugin = function (name) {\n        var plugin = this.plugins[name];\n        if (plugin) {\n            plugin.uninstall();\n        }\n        delete this.plugins[name];\n        return this;\n    };\n    Core.prototype.enablePlugin = function (name) {\n        var plugin = this.plugins[name];\n        if (plugin) {\n            plugin.enable();\n        }\n        return this;\n    };\n    Core.prototype.disablePlugin = function (name) {\n        var plugin = this.plugins[name];\n        if (plugin) {\n            plugin.disable();\n        }\n        return this;\n    };\n    Core.prototype.isPluginEnabled = function (name) {\n        var plugin = this.plugins[name];\n        return plugin ? plugin.isPluginEnabled() : false;\n    };\n    Core.prototype.registerValidator = function (name, func) {\n        if (this.validators[name]) {\n            throw new Error(\"The validator \".concat(name, \" is registered\"));\n        }\n        this.validators[name] = func;\n        return this;\n    };\n    /**\n     * Add a filter\n     *\n     * @param {string} name The name of filter\n     * @param {Function} func The filter function\n     * @return {Core}\n     */\n    Core.prototype.registerFilter = function (name, func) {\n        this.filter.add(name, func);\n        return this;\n    };\n    /**\n     * Remove a filter\n     *\n     * @param {string} name The name of filter\n     * @param {Function} func The filter function\n     * @return {Core}\n     */\n    Core.prototype.deregisterFilter = function (name, func) {\n        this.filter.remove(name, func);\n        return this;\n    };\n    /**\n     * Execute a filter\n     *\n     * @param {string} name The name of filter\n     * @param {T} defaultValue The default value returns by the filter\n     * @param {array} args The filter arguments\n     * @returns {T}\n     */\n    Core.prototype.executeFilter = function (name, defaultValue, args) {\n        return this.filter.execute(name, defaultValue, args);\n    };\n    /**\n     * Add a field\n     *\n     * @param {string} field The field name\n     * @param {FieldOptions} options The field options. The options will be merged with the original validator rules\n     * if the field is already defined\n     * @return {Core}\n     */\n    Core.prototype.addField = function (field, options) {\n        var opts = Object.assign({}, {\n            selector: '',\n            validators: {},\n        }, options);\n        // Merge the options\n        this.fields[field] = this.fields[field]\n            ? {\n                selector: opts.selector || this.fields[field].selector,\n                validators: Object.assign({}, this.fields[field].validators, opts.validators),\n            }\n            : opts;\n        this.elements[field] = this.queryElements(field);\n        this.emit('core.field.added', {\n            elements: this.elements[field],\n            field: field,\n            options: this.fields[field],\n        });\n        return this;\n    };\n    /**\n     * Remove given field by name\n     *\n     * @param {string} field The field name\n     * @return {Core}\n     */\n    Core.prototype.removeField = function (field) {\n        if (!this.fields[field]) {\n            throw new Error(\"The field \".concat(field, \" validators are not defined. Please ensure the field is added first\"));\n        }\n        var elements = this.elements[field];\n        var options = this.fields[field];\n        delete this.elements[field];\n        delete this.fields[field];\n        this.emit('core.field.removed', {\n            elements: elements,\n            field: field,\n            options: options,\n        });\n        return this;\n    };\n    /**\n     * Validate all fields\n     *\n     * @return {Promise<string>}\n     */\n    Core.prototype.validate = function () {\n        var _this = this;\n        this.emit('core.form.validating', {\n            formValidation: this,\n        });\n        return this.filter.execute('validate-pre', Promise.resolve(), []).then(function () {\n            return Promise.all(Object.keys(_this.fields).map(function (field) { return _this.validateField(field); })).then(function (results) {\n                // `results` is an array of `Valid`, `Invalid` and `NotValidated`\n                switch (true) {\n                    case results.indexOf('Invalid') !== -1:\n                        _this.emit('core.form.invalid', {\n                            formValidation: _this,\n                        });\n                        return Promise.resolve('Invalid');\n                    case results.indexOf('NotValidated') !== -1:\n                        _this.emit('core.form.notvalidated', {\n                            formValidation: _this,\n                        });\n                        return Promise.resolve('NotValidated');\n                    default:\n                        _this.emit('core.form.valid', {\n                            formValidation: _this,\n                        });\n                        return Promise.resolve('Valid');\n                }\n            });\n        });\n    };\n    /**\n     * Validate a particular field\n     *\n     * @param {string} field The field name\n     * @return {Promise<string>}\n     */\n    Core.prototype.validateField = function (field) {\n        var _this = this;\n        // Stop validation process if the field is already validated\n        var result = this.results.get(field);\n        if (result === 'Valid' || result === 'Invalid') {\n            return Promise.resolve(result);\n        }\n        this.emit('core.field.validating', field);\n        var elements = this.elements[field];\n        if (elements.length === 0) {\n            this.emit('core.field.valid', field);\n            return Promise.resolve('Valid');\n        }\n        var type = elements[0].getAttribute('type');\n        if ('radio' === type || 'checkbox' === type || elements.length === 1) {\n            return this.validateElement(field, elements[0]);\n        }\n        else {\n            return Promise.all(elements.map(function (ele) { return _this.validateElement(field, ele); })).then(function (results) {\n                // `results` is an array of `Valid`, `Invalid` and `NotValidated`\n                switch (true) {\n                    case results.indexOf('Invalid') !== -1:\n                        _this.emit('core.field.invalid', field);\n                        _this.results.set(field, 'Invalid');\n                        return Promise.resolve('Invalid');\n                    case results.indexOf('NotValidated') !== -1:\n                        _this.emit('core.field.notvalidated', field);\n                        _this.results.delete(field);\n                        return Promise.resolve('NotValidated');\n                    default:\n                        _this.emit('core.field.valid', field);\n                        _this.results.set(field, 'Valid');\n                        return Promise.resolve('Valid');\n                }\n            });\n        }\n    };\n    /**\n     * Validate particular element\n     *\n     * @param {string} field The field name\n     * @param {HTMLElement} ele The field element\n     * @return {Promise<string>}\n     */\n    Core.prototype.validateElement = function (field, ele) {\n        var _this = this;\n        // Reset validation result\n        this.results.delete(field);\n        var elements = this.elements[field];\n        var ignored = this.filter.execute('element-ignored', false, [field, ele, elements]);\n        if (ignored) {\n            this.emit('core.element.ignored', {\n                element: ele,\n                elements: elements,\n                field: field,\n            });\n            return Promise.resolve('Ignored');\n        }\n        var validatorList = this.fields[field].validators;\n        this.emit('core.element.validating', {\n            element: ele,\n            elements: elements,\n            field: field,\n        });\n        var promises = Object.keys(validatorList).map(function (v) {\n            return function () { return _this.executeValidator(field, ele, v, validatorList[v]); };\n        });\n        return this.waterfall(promises)\n            .then(function (results) {\n            // `results` is an array of `Valid` or `Invalid`\n            var isValid = results.indexOf('Invalid') === -1;\n            _this.emit('core.element.validated', {\n                element: ele,\n                elements: elements,\n                field: field,\n                valid: isValid,\n            });\n            var type = ele.getAttribute('type');\n            if ('radio' === type || 'checkbox' === type || elements.length === 1) {\n                _this.emit(isValid ? 'core.field.valid' : 'core.field.invalid', field);\n            }\n            return Promise.resolve(isValid ? 'Valid' : 'Invalid');\n        })\n            .catch(function (reason) {\n            // reason is `NotValidated`\n            _this.emit('core.element.notvalidated', {\n                element: ele,\n                elements: elements,\n                field: field,\n            });\n            return Promise.resolve(reason);\n        });\n    };\n    /**\n     * Perform given validator on field\n     *\n     * @param {string} field The field name\n     * @param {HTMLElement} ele The field element\n     * @param {string} v The validator name\n     * @param {ValidatorOptions} opts The validator options\n     * @return {Promise<string>}\n     */\n    Core.prototype.executeValidator = function (field, ele, v, opts) {\n        var _this = this;\n        var elements = this.elements[field];\n        var name = this.filter.execute('validator-name', v, [v, field]);\n        opts.message = this.filter.execute('validator-message', opts.message, [this.locale, field, name]);\n        // Simply pass the validator if\n        // - it isn't defined yet\n        // - or the associated validator isn't enabled\n        if (!this.validators[name] || opts.enabled === false) {\n            this.emit('core.validator.validated', {\n                element: ele,\n                elements: elements,\n                field: field,\n                result: this.normalizeResult(field, name, { valid: true }),\n                validator: name,\n            });\n            return Promise.resolve('Valid');\n        }\n        var validator = this.validators[name];\n        // Get the field value\n        var value = this.getElementValue(field, ele, name);\n        var willValidate = this.filter.execute('field-should-validate', true, [field, ele, value, v]);\n        if (!willValidate) {\n            this.emit('core.validator.notvalidated', {\n                element: ele,\n                elements: elements,\n                field: field,\n                validator: v,\n            });\n            return Promise.resolve('NotValidated');\n        }\n        this.emit('core.validator.validating', {\n            element: ele,\n            elements: elements,\n            field: field,\n            validator: v,\n        });\n        // Perform validation\n        var result = validator().validate({\n            element: ele,\n            elements: elements,\n            field: field,\n            l10n: this.localization,\n            options: opts,\n            value: value,\n        });\n        // Check whether the result is a `Promise`\n        var isPromise = 'function' === typeof result['then'];\n        if (isPromise) {\n            return result.then(function (r) {\n                var data = _this.normalizeResult(field, v, r);\n                _this.emit('core.validator.validated', {\n                    element: ele,\n                    elements: elements,\n                    field: field,\n                    result: data,\n                    validator: v,\n                });\n                return data.valid ? 'Valid' : 'Invalid';\n            });\n        }\n        else {\n            var data = this.normalizeResult(field, v, result);\n            this.emit('core.validator.validated', {\n                element: ele,\n                elements: elements,\n                field: field,\n                result: data,\n                validator: v,\n            });\n            return Promise.resolve(data.valid ? 'Valid' : 'Invalid');\n        }\n    };\n    Core.prototype.getElementValue = function (field, ele, validator) {\n        var defaultValue = getFieldValue(this.form, field, ele, this.elements[field]);\n        return this.filter.execute('field-value', defaultValue, [defaultValue, field, ele, validator]);\n    };\n    // Some getter methods\n    Core.prototype.getElements = function (field) {\n        return this.elements[field];\n    };\n    Core.prototype.getFields = function () {\n        return this.fields;\n    };\n    Core.prototype.getFormElement = function () {\n        return this.form;\n    };\n    Core.prototype.getLocale = function () {\n        return this.locale;\n    };\n    Core.prototype.getPlugin = function (name) {\n        return this.plugins[name];\n    };\n    /**\n     * Update the field status\n     *\n     * @param {string} field The field name\n     * @param {string} status The new status\n     * @param {string} [validator] The validator name. If it isn't specified, all validators will be updated\n     * @return {Core}\n     */\n    Core.prototype.updateFieldStatus = function (field, status, validator) {\n        var _this = this;\n        var elements = this.elements[field];\n        var type = elements[0].getAttribute('type');\n        var list = 'radio' === type || 'checkbox' === type ? [elements[0]] : elements;\n        list.forEach(function (ele) { return _this.updateElementStatus(field, ele, status, validator); });\n        if (!validator) {\n            switch (status) {\n                case 'NotValidated':\n                    this.emit('core.field.notvalidated', field);\n                    this.results.delete(field);\n                    break;\n                case 'Validating':\n                    this.emit('core.field.validating', field);\n                    this.results.delete(field);\n                    break;\n                case 'Valid':\n                    this.emit('core.field.valid', field);\n                    this.results.set(field, 'Valid');\n                    break;\n                case 'Invalid':\n                    this.emit('core.field.invalid', field);\n                    this.results.set(field, 'Invalid');\n                    break;\n            }\n        }\n        else if (status === 'Invalid') {\n            // We need to mark the field as invalid because it doesn't pass the `validator`\n            this.emit('core.field.invalid', field);\n            this.results.set(field, 'Invalid');\n        }\n        return this;\n    };\n    /**\n     * Update the element status\n     *\n     * @param {string} field The field name\n     * @param {HTMLElement} ele The field element\n     * @param {string} status The new status\n     * @param {string} [validator] The validator name. If it isn't specified, all validators will be updated\n     * @return {Core}\n     */\n    Core.prototype.updateElementStatus = function (field, ele, status, validator) {\n        var _this = this;\n        var elements = this.elements[field];\n        var fieldValidators = this.fields[field].validators;\n        var validatorArr = validator ? [validator] : Object.keys(fieldValidators);\n        switch (status) {\n            case 'NotValidated':\n                validatorArr.forEach(function (v) {\n                    return _this.emit('core.validator.notvalidated', {\n                        element: ele,\n                        elements: elements,\n                        field: field,\n                        validator: v,\n                    });\n                });\n                this.emit('core.element.notvalidated', {\n                    element: ele,\n                    elements: elements,\n                    field: field,\n                });\n                break;\n            case 'Validating':\n                validatorArr.forEach(function (v) {\n                    return _this.emit('core.validator.validating', {\n                        element: ele,\n                        elements: elements,\n                        field: field,\n                        validator: v,\n                    });\n                });\n                this.emit('core.element.validating', {\n                    element: ele,\n                    elements: elements,\n                    field: field,\n                });\n                break;\n            case 'Valid':\n                validatorArr.forEach(function (v) {\n                    return _this.emit('core.validator.validated', {\n                        element: ele,\n                        elements: elements,\n                        field: field,\n                        result: {\n                            message: fieldValidators[v].message,\n                            valid: true,\n                        },\n                        validator: v,\n                    });\n                });\n                this.emit('core.element.validated', {\n                    element: ele,\n                    elements: elements,\n                    field: field,\n                    valid: true,\n                });\n                break;\n            case 'Invalid':\n                validatorArr.forEach(function (v) {\n                    return _this.emit('core.validator.validated', {\n                        element: ele,\n                        elements: elements,\n                        field: field,\n                        result: {\n                            message: fieldValidators[v].message,\n                            valid: false,\n                        },\n                        validator: v,\n                    });\n                });\n                this.emit('core.element.validated', {\n                    element: ele,\n                    elements: elements,\n                    field: field,\n                    valid: false,\n                });\n                break;\n        }\n        return this;\n    };\n    /**\n     * Reset the form. It also clears all the messages, hide the feedback icons, etc.\n     *\n     * @param {boolean} reset If true, the method resets field value to empty\n     * or remove `checked`, `selected` attributes\n     * @return {Core}\n     */\n    Core.prototype.resetForm = function (reset) {\n        var _this = this;\n        Object.keys(this.fields).forEach(function (field) { return _this.resetField(field, reset); });\n        this.emit('core.form.reset', {\n            formValidation: this,\n            reset: reset,\n        });\n        return this;\n    };\n    /**\n     * Reset the field. It also clears all the messages, hide the feedback icons, etc.\n     *\n     * @param {string} field The field name\n     * @param {boolean} reset If true, the method resets field value to empty\n     * or remove `checked`, `selected` attributes\n     * @return {Core}\n     */\n    Core.prototype.resetField = function (field, reset) {\n        // Reset the field element value if needed\n        if (reset) {\n            var elements = this.elements[field];\n            var type_1 = elements[0].getAttribute('type');\n            elements.forEach(function (ele) {\n                if ('radio' === type_1 || 'checkbox' === type_1) {\n                    ele.removeAttribute('selected');\n                    ele.removeAttribute('checked');\n                    ele.checked = false;\n                }\n                else {\n                    ele.setAttribute('value', '');\n                    if (ele instanceof HTMLInputElement || ele instanceof HTMLTextAreaElement) {\n                        ele.value = '';\n                    }\n                }\n            });\n        }\n        // Mark the field as not validated yet\n        this.updateFieldStatus(field, 'NotValidated');\n        this.emit('core.field.reset', {\n            field: field,\n            reset: reset,\n        });\n        return this;\n    };\n    /**\n     * Revalidate a particular field. It's useful when the field value is effected by third parties\n     * (for example, attach another UI library to the field).\n     * Since there isn't an automatic way for FormValidation to know when the field value is modified in those cases,\n     * we need to revalidate the field manually.\n     *\n     * @param {string} field The field name\n     * @return {Promise<string>}\n     */\n    Core.prototype.revalidateField = function (field) {\n        if (!this.fields[field]) {\n            return Promise.resolve('Ignored');\n        }\n        this.updateFieldStatus(field, 'NotValidated');\n        return this.validateField(field);\n    };\n    /**\n     * Disable particular validator for given field\n     *\n     * @param {string} field The field name\n     * @param {string} validator The validator name. If it isn't specified, all validators will be disabled\n     * @return {Core}\n     */\n    Core.prototype.disableValidator = function (field, validator) {\n        if (!this.fields[field]) {\n            return this;\n        }\n        var elements = this.elements[field];\n        this.toggleValidator(false, field, validator);\n        this.emit('core.validator.disabled', {\n            elements: elements,\n            field: field,\n            formValidation: this,\n            validator: validator,\n        });\n        return this;\n    };\n    /**\n     * Enable particular validator for given field\n     *\n     * @param {string} field The field name\n     * @param {string} validator The validator name. If it isn't specified, all validators will be enabled\n     * @return {Core}\n     */\n    Core.prototype.enableValidator = function (field, validator) {\n        if (!this.fields[field]) {\n            return this;\n        }\n        var elements = this.elements[field];\n        this.toggleValidator(true, field, validator);\n        this.emit('core.validator.enabled', {\n            elements: elements,\n            field: field,\n            formValidation: this,\n            validator: validator,\n        });\n        return this;\n    };\n    /**\n     * Update option of particular validator for given field\n     *\n     * @param {string} field The field name\n     * @param {string} validator The validator name\n     * @param {string} name The option's name\n     * @param {unknown} value The option's value\n     * @return {Core}\n     */\n    Core.prototype.updateValidatorOption = function (field, validator, name, value) {\n        if (this.fields[field] && this.fields[field].validators && this.fields[field].validators[validator]) {\n            this.fields[field].validators[validator][name] = value;\n        }\n        return this;\n    };\n    Core.prototype.setFieldOptions = function (field, options) {\n        this.fields[field] = options;\n        return this;\n    };\n    Core.prototype.destroy = function () {\n        var _this = this;\n        // Remove plugins and filters\n        Object.keys(this.plugins).forEach(function (id) { return _this.plugins[id].uninstall(); });\n        this.ee.clear();\n        this.filter.clear();\n        this.results.clear();\n        this.plugins = {};\n        return this;\n    };\n    Core.prototype.setLocale = function (locale, localization) {\n        this.locale = locale;\n        this.localization = localization;\n        return this;\n    };\n    Core.prototype.waterfall = function (promises) {\n        return promises.reduce(function (p, c) {\n            return p.then(function (res) {\n                return c().then(function (result) {\n                    res.push(result);\n                    return res;\n                });\n            });\n        }, Promise.resolve([]));\n    };\n    Core.prototype.queryElements = function (field) {\n        var selector = this.fields[field].selector\n            ? // Check if the selector is an ID selector which starts with `#`\n                '#' === this.fields[field].selector.charAt(0)\n                    ? \"[id=\\\"\".concat(this.fields[field].selector.substring(1), \"\\\"]\")\n                    : this.fields[field].selector\n            : \"[name=\\\"\".concat(field.replace(/\"/g, '\\\\\"'), \"\\\"]\");\n        return [].slice.call(this.form.querySelectorAll(selector));\n    };\n    Core.prototype.normalizeResult = function (field, validator, result) {\n        var opts = this.fields[field].validators[validator];\n        return Object.assign({}, result, {\n            message: result.message ||\n                (opts ? opts.message : '') ||\n                (this.localization && this.localization[validator] && this.localization[validator]['default']\n                    ? this.localization[validator]['default']\n                    : '') ||\n                \"The field \".concat(field, \" is not valid\"),\n        });\n    };\n    Core.prototype.toggleValidator = function (enabled, field, validator) {\n        var _this = this;\n        var validatorArr = this.fields[field].validators;\n        if (validator && validatorArr && validatorArr[validator]) {\n            this.fields[field].validators[validator].enabled = enabled;\n        }\n        else if (!validator) {\n            Object.keys(validatorArr).forEach(function (v) { return (_this.fields[field].validators[v].enabled = enabled); });\n        }\n        return this.updateFieldStatus(field, 'NotValidated', validator);\n    };\n    return Core;\n}());\nfunction formValidation(form, options) {\n    var opts = Object.assign({}, {\n        fields: {},\n        locale: 'en_US',\n        plugins: {},\n        init: function (_) { },\n    }, options);\n    var core = new Core(form, opts.fields);\n    core.setLocale(opts.locale, opts.localization);\n    // Register plugins\n    Object.keys(opts.plugins).forEach(function (name) { return core.registerPlugin(name, opts.plugins[name]); });\n    // It's the single point that users can do a particular task before adding fields\n    // Some initialization tasks must be done at that point\n    opts.init(core);\n    // and add fields\n    Object.keys(opts.fields).forEach(function (field) { return core.addField(field, opts.fields[field]); });\n    return core;\n}\n\n/**\n * FormValidation (https://formvalidation.io)\n * The best validation library for JavaScript\n * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n */\nvar Plugin = /** @class */ (function () {\n    function Plugin(opts) {\n        this.opts = opts;\n        this.isEnabled = true;\n    }\n    Plugin.prototype.setCore = function (core) {\n        this.core = core;\n        return this;\n    };\n    Plugin.prototype.enable = function () {\n        this.isEnabled = true;\n        this.onEnabled();\n        return this;\n    };\n    Plugin.prototype.disable = function () {\n        this.isEnabled = false;\n        this.onDisabled();\n        return this;\n    };\n    Plugin.prototype.isPluginEnabled = function () {\n        return this.isEnabled;\n    };\n    Plugin.prototype.onEnabled = function () { }; // eslint-disable-line @typescript-eslint/no-empty-function\n    Plugin.prototype.onDisabled = function () { }; // eslint-disable-line @typescript-eslint/no-empty-function\n    Plugin.prototype.install = function () { }; // eslint-disable-line @typescript-eslint/no-empty-function\n    Plugin.prototype.uninstall = function () { }; // eslint-disable-line @typescript-eslint/no-empty-function\n    return Plugin;\n}());\n\n/**\n * FormValidation (https://formvalidation.io)\n * The best validation library for JavaScript\n * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n */\n/**\n * Execute a callback function\n *\n * @param {Function | string} functionName Can be\n * - name of global function\n * - name of namespace function (such as A.B.C)\n * - a function\n * @param {any[]} args The callback arguments\n * @return {any}\n */\nfunction call(functionName, args) {\n    if ('function' === typeof functionName) {\n        return functionName.apply(this, args);\n    }\n    else if ('string' === typeof functionName) {\n        // Node that it doesn't support node.js based environment because we are trying to access `window`\n        var name_1 = functionName;\n        if ('()' === name_1.substring(name_1.length - 2)) {\n            name_1 = name_1.substring(0, name_1.length - 2);\n        }\n        var ns = name_1.split('.');\n        var func = ns.pop();\n        var context_1 = window;\n        for (var _i = 0, ns_1 = ns; _i < ns_1.length; _i++) {\n            var t = ns_1[_i];\n            context_1 = context_1[t];\n        }\n        return typeof context_1[func] === 'undefined' ? null : context_1[func].apply(this, args);\n    }\n}\n\n/**\n * FormValidation (https://formvalidation.io)\n * The best validation library for JavaScript\n * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n */\nvar addClass = function (element, classes) {\n    classes.split(' ').forEach(function (clazz) {\n        if (element.classList) {\n            element.classList.add(clazz);\n        }\n        else if (\" \".concat(element.className, \" \").indexOf(\" \".concat(clazz, \" \"))) {\n            element.className += \" \".concat(clazz);\n        }\n    });\n};\nvar removeClass = function (element, classes) {\n    classes.split(' ').forEach(function (clazz) {\n        element.classList\n            ? element.classList.remove(clazz)\n            : (element.className = element.className.replace(clazz, ''));\n    });\n};\nvar classSet = function (element, classes) {\n    var adding = [];\n    var removing = [];\n    Object.keys(classes).forEach(function (clazz) {\n        if (clazz) {\n            classes[clazz] ? adding.push(clazz) : removing.push(clazz);\n        }\n    });\n    // Always remove before adding class because there might be a class which belong to both sets.\n    // For example, the element will have class `a` after calling\n    //  ```\n    //  classSet(element, {\n    //      'a a1 a2': true,\n    //      'a b1 b2': false\n    //  })\n    //  ```\n    removing.forEach(function (clazz) { return removeClass(element, clazz); });\n    adding.forEach(function (clazz) { return addClass(element, clazz); });\n};\n\n/**\n * FormValidation (https://formvalidation.io)\n * The best validation library for JavaScript\n * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n */\nvar matches = function (element, selector) {\n    var nativeMatches = element.matches ||\n        element.webkitMatchesSelector ||\n        element['mozMatchesSelector'] ||\n        element['msMatchesSelector'];\n    if (nativeMatches) {\n        return nativeMatches.call(element, selector);\n    }\n    // In case `matchesselector` isn't supported (such as IE10)\n    // See http://caniuse.com/matchesselector\n    var nodes = [].slice.call(element.parentElement.querySelectorAll(selector));\n    return nodes.indexOf(element) >= 0;\n};\nvar closest = function (element, selector) {\n    var ele = element;\n    while (ele) {\n        if (matches(ele, selector)) {\n            break;\n        }\n        ele = ele.parentElement;\n    }\n    return ele;\n};\n\n/**\n * FormValidation (https://formvalidation.io)\n * The best validation library for JavaScript\n * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n */\nvar generateString = function (length) {\n    return Array(length)\n        .fill('')\n        .map(function (v) { return Math.random().toString(36).charAt(2); })\n        .join('');\n};\nvar fetch = function (url, options) {\n    var toQuery = function (obj) {\n        return Object.keys(obj)\n            .map(function (k) { return \"\".concat(encodeURIComponent(k), \"=\").concat(encodeURIComponent(obj[k])); })\n            .join('&');\n    };\n    return new Promise(function (resolve, reject) {\n        var opts = Object.assign({}, {\n            crossDomain: false,\n            headers: {},\n            method: 'GET',\n            params: {},\n        }, options);\n        // Build the params for GET request\n        var params = Object.keys(opts.params)\n            .map(function (k) { return \"\".concat(encodeURIComponent(k), \"=\").concat(encodeURIComponent(opts.params[k])); })\n            .join('&');\n        var hasQuery = url.indexOf('?') > -1;\n        var requestUrl = 'GET' === opts.method ? \"\".concat(url).concat(hasQuery ? '&' : '?').concat(params) : url;\n        if (opts.crossDomain) {\n            // User is making cross domain request\n            var script_1 = document.createElement('script');\n            // In some very fast systems, the different `Date.now()` invocations can return the same value\n            // which leads to the issue where there are multiple remove validators are used, for example.\n            // Appending it with a generated random string can fix the value\n            var callback_1 = \"___FormValidationFetch_\".concat(generateString(12), \"___\");\n            window[callback_1] = function (data) {\n                delete window[callback_1];\n                resolve(data);\n            };\n            script_1.src = \"\".concat(requestUrl).concat(hasQuery ? '&' : '?', \"callback=\").concat(callback_1);\n            script_1.async = true;\n            script_1.addEventListener('load', function () {\n                script_1.parentNode.removeChild(script_1);\n            });\n            script_1.addEventListener('error', function () { return reject; });\n            document.head.appendChild(script_1);\n        }\n        else {\n            var request_1 = new XMLHttpRequest();\n            request_1.open(opts.method, requestUrl);\n            // Set the headers\n            request_1.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n            if ('POST' === opts.method) {\n                request_1.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n            }\n            Object.keys(opts.headers).forEach(function (k) { return request_1.setRequestHeader(k, opts.headers[k]); });\n            request_1.addEventListener('load', function () {\n                // Cannot use arrow function here due to the `this` scope\n                resolve(JSON.parse(this.responseText));\n            });\n            request_1.addEventListener('error', function () { return reject; });\n            // GET request will ignore the passed data here\n            request_1.send(toQuery(opts.params));\n        }\n    });\n};\n\n/**\n * FormValidation (https://formvalidation.io)\n * The best validation library for JavaScript\n * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n */\n/**\n * Format a string\n * It's used to format the error message\n * format('The field must between %s and %s', [10, 20]) = 'The field must between 10 and 20'\n *\n * @param {string} message\n * @param {string|string[]} parameters\n * @returns {string}\n */\nvar format = function (message, parameters) {\n    var params = Array.isArray(parameters) ? parameters : [parameters];\n    var output = message;\n    params.forEach(function (p) {\n        output = output.replace('%s', p);\n    });\n    return output;\n};\n\n/**\n * FormValidation (https://formvalidation.io)\n * The best validation library for JavaScript\n * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n */\nvar hasClass = function (element, clazz) {\n    return element.classList\n        ? element.classList.contains(clazz)\n        : new RegExp(\"(^| )\".concat(clazz, \"( |$)\"), 'gi').test(element.className);\n};\n\n/**\n * FormValidation (https://formvalidation.io)\n * The best validation library for JavaScript\n * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n */\n/**\n * Validate a date\n *\n * @param {string} year The full year in 4 digits\n * @param {string} month The month number\n * @param {string} day The day number\n * @param {boolean} [notInFuture] If true, the date must not be in the future\n * @returns {boolean}\n */\nvar isValidDate = function (year, month, day, notInFuture) {\n    if (isNaN(year) || isNaN(month) || isNaN(day)) {\n        return false;\n    }\n    if (year < 1000 || year > 9999 || month <= 0 || month > 12) {\n        return false;\n    }\n    var numDays = [\n        31,\n        // Update the number of days in Feb of leap year\n        year % 400 === 0 || (year % 100 !== 0 && year % 4 === 0) ? 29 : 28,\n        31,\n        30,\n        31,\n        30,\n        31,\n        31,\n        30,\n        31,\n        30,\n        31,\n    ];\n    // Check the day\n    if (day <= 0 || day > numDays[month - 1]) {\n        return false;\n    }\n    if (notInFuture === true) {\n        var currentDate = new Date();\n        var currentYear = currentDate.getFullYear();\n        var currentMonth = currentDate.getMonth();\n        var currentDay = currentDate.getDate();\n        return (year < currentYear ||\n            (year === currentYear && month - 1 < currentMonth) ||\n            (year === currentYear && month - 1 === currentMonth && day < currentDay));\n    }\n    return true;\n};\n\n/**\n * FormValidation (https://formvalidation.io)\n * The best validation library for JavaScript\n * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n */\nvar removeUndefined = function (obj) {\n    return obj\n        ? Object.entries(obj).reduce(function (a, _a) {\n            var k = _a[0], v = _a[1];\n            return (v === undefined ? a : ((a[k] = v), a));\n        }, {})\n        : {};\n};\n\n/**\n * FormValidation (https://formvalidation.io)\n * The best validation library for JavaScript\n * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n */\nvar index = {\n    call: call,\n    classSet: classSet,\n    closest: closest,\n    fetch: fetch,\n    format: format,\n    hasClass: hasClass,\n    isValidDate: isValidDate,\n    removeUndefined: removeUndefined,\n};\n\nexports.Plugin = Plugin;\nexports.algorithms = index$1;\nexports.formValidation = formValidation;\nexports.utils = index;\n\n\n//# sourceURL=webpack://Materio/./node_modules/@form-validation/core/lib/cjs/index.js?");

/***/ }),

/***/ "./node_modules/@form-validation/core/lib/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@form-validation/core/lib/index.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * FormValidation (https://formvalidation.io)\n * The best validation library for JavaScript\n * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n */\n\n\n\nif (false) {} else {\n    module.exports = __webpack_require__(/*! ./cjs/index.js */ \"./node_modules/@form-validation/core/lib/cjs/index.js\");\n}\n\n\n//# sourceURL=webpack://Materio/./node_modules/@form-validation/core/lib/index.js?");

/***/ }),

/***/ "./libs/@form-validation/umd/validator-id/index.js":
/*!*********************************************************!*\
  !*** ./libs/@form-validation/umd/validator-id/index.js ***!
  \*********************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\n(function (global, factory) {\n  ( false ? 0 : _typeof(exports)) === 'object' && \"object\" !== 'undefined' ? module.exports = factory(__webpack_require__(/*! @form-validation/core */ \"./node_modules/@form-validation/core/lib/index.js\")) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! @form-validation/core */ \"./node_modules/@form-validation/core/lib/index.js\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : (0);\n})(this, function (core) {\n  'use strict';\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  /**\n   * Validate Argentinian national identifiers\n   *\n   * @see https://en.wikipedia.org/wiki/Documento_Nacional_de_Identidad_(Argentina)\n   * @returns {ValidateResult}\n   */\n  function arId(value) {\n    // Replace dot with empty space\n    var v = value.replace(/\\./g, '');\n    return {\n      meta: {},\n      valid: /^\\d{7,8}$/.test(v)\n    };\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  /**\n   * Validate Unique Master Citizen Number which uses in\n   * - Bosnia and Herzegovina (country code: BA)\n   * - Macedonia (MK)\n   * - Montenegro (ME)\n   * - Serbia (RS)\n   * - Slovenia (SI)\n   *\n   * @see http://en.wikipedia.org/wiki/Unique_Master_Citizen_Number\n   * @returns {boolean}\n   */\n  function jmbg(value, countryCode) {\n    if (!/^\\d{13}$/.test(value)) {\n      return false;\n    }\n    var day = parseInt(value.substr(0, 2), 10);\n    var month = parseInt(value.substr(2, 2), 10);\n    // const year = parseInt(value.substr(4, 3), 10)\n    var rr = parseInt(value.substr(7, 2), 10);\n    var k = parseInt(value.substr(12, 1), 10);\n    // Validate date of birth\n    // FIXME: Validate the year of birth\n    if (day > 31 || month > 12) {\n      return false;\n    }\n    // Validate checksum\n    var sum = 0;\n    for (var i = 0; i < 6; i++) {\n      sum += (7 - i) * (parseInt(value.charAt(i), 10) + parseInt(value.charAt(i + 6), 10));\n    }\n    sum = 11 - sum % 11;\n    if (sum === 10 || sum === 11) {\n      sum = 0;\n    }\n    if (sum !== k) {\n      return false;\n    }\n    // Validate political region\n    // rr is the political region of birth, which can be in ranges:\n    // 10-19: Bosnia and Herzegovina\n    // 20-29: Montenegro\n    // 30-39: Croatia (not used anymore)\n    // 41-49: Macedonia\n    // 50-59: Slovenia (only 50 is used)\n    // 70-79: Central Serbia\n    // 80-89: Serbian province of Vojvodina\n    // 90-99: Kosovo\n    switch (countryCode.toUpperCase()) {\n      case 'BA':\n        return 10 <= rr && rr <= 19;\n      case 'MK':\n        return 41 <= rr && rr <= 49;\n      case 'ME':\n        return 20 <= rr && rr <= 29;\n      case 'RS':\n        return 70 <= rr && rr <= 99;\n      case 'SI':\n        return 50 <= rr && rr <= 59;\n      default:\n        return true;\n    }\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  /**\n   * @returns {ValidateResult}\n   */\n  function baId(value) {\n    return {\n      meta: {},\n      valid: jmbg(value, 'BA')\n    };\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  var isValidDate$d = core.utils.isValidDate;\n  /**\n   * Validate Bulgarian national identification number (EGN)\n   *\n   * @see http://en.wikipedia.org/wiki/Uniform_civil_number\n   * @returns {ValidateResult}\n   */\n  function bgId(value) {\n    if (!/^\\d{10}$/.test(value) && !/^\\d{6}\\s\\d{3}\\s\\d{1}$/.test(value)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    var v = value.replace(/\\s/g, '');\n    // Check the birth date\n    var year = parseInt(v.substr(0, 2), 10) + 1900;\n    var month = parseInt(v.substr(2, 2), 10);\n    var day = parseInt(v.substr(4, 2), 10);\n    if (month > 40) {\n      year += 100;\n      month -= 40;\n    } else if (month > 20) {\n      year -= 100;\n      month -= 20;\n    }\n    if (!isValidDate$d(year, month, day)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    var sum = 0;\n    var weight = [2, 4, 8, 5, 10, 9, 7, 3, 6];\n    for (var i = 0; i < 9; i++) {\n      sum += parseInt(v.charAt(i), 10) * weight[i];\n    }\n    sum = sum % 11 % 10;\n    return {\n      meta: {},\n      valid: \"\".concat(sum) === v.substr(9, 1)\n    };\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  /**\n   * Validate Brazilian national identification number (CPF)\n   *\n   * @see http://en.wikipedia.org/wiki/Cadastro_de_Pessoas_F%C3%ADsicas\n   * @returns {ValidateResult}\n   */\n  function brId(value) {\n    var v = value.replace(/\\D/g, '');\n    if (!/^\\d{11}$/.test(v) || /^1{11}|2{11}|3{11}|4{11}|5{11}|6{11}|7{11}|8{11}|9{11}|0{11}$/.test(v)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    var d1 = 0;\n    var i;\n    for (i = 0; i < 9; i++) {\n      d1 += (10 - i) * parseInt(v.charAt(i), 10);\n    }\n    d1 = 11 - d1 % 11;\n    if (d1 === 10 || d1 === 11) {\n      d1 = 0;\n    }\n    if (\"\".concat(d1) !== v.charAt(9)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    var d2 = 0;\n    for (i = 0; i < 10; i++) {\n      d2 += (11 - i) * parseInt(v.charAt(i), 10);\n    }\n    d2 = 11 - d2 % 11;\n    if (d2 === 10 || d2 === 11) {\n      d2 = 0;\n    }\n    return {\n      meta: {},\n      valid: \"\".concat(d2) === v.charAt(10)\n    };\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  /**\n   * Validate Swiss Social Security Number (AHV-Nr/No AVS)\n   *\n   * @see http://en.wikipedia.org/wiki/National_identification_number#Switzerland\n   * @see http://www.bsv.admin.ch/themen/ahv/00011/02185/index.html?lang=de\n   * @returns {ValidateResult}\n   */\n  function chId(value) {\n    if (!/^756[.]{0,1}[0-9]{4}[.]{0,1}[0-9]{4}[.]{0,1}[0-9]{2}$/.test(value)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    var v = value.replace(/\\D/g, '').substr(3);\n    var length = v.length;\n    var weight = length === 8 ? [3, 1] : [1, 3];\n    var sum = 0;\n    for (var i = 0; i < length - 1; i++) {\n      sum += parseInt(v.charAt(i), 10) * weight[i % 2];\n    }\n    sum = 10 - sum % 10;\n    return {\n      meta: {},\n      valid: \"\".concat(sum) === v.charAt(length - 1)\n    };\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  /**\n   * Validate Chilean national identification number (RUN/RUT)\n   *\n   * @see http://en.wikipedia.org/wiki/National_identification_number#Chile\n   * @see https://palena.sii.cl/cvc/dte/ee_empresas_emisoras.html for samples\n   * @returns {ValidateResult}\n   */\n  function clId(value) {\n    if (!/^\\d{7,8}[-]{0,1}[0-9K]$/i.test(value)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    var v = value.replace(/-/g, '');\n    while (v.length < 9) {\n      v = \"0\".concat(v);\n    }\n    var weight = [3, 2, 7, 6, 5, 4, 3, 2];\n    var sum = 0;\n    for (var i = 0; i < 8; i++) {\n      sum += parseInt(v.charAt(i), 10) * weight[i];\n    }\n    sum = 11 - sum % 11;\n    var cd = \"\".concat(sum);\n    if (sum === 11) {\n      cd = '0';\n    } else if (sum === 10) {\n      cd = 'K';\n    }\n    return {\n      meta: {},\n      valid: cd === v.charAt(8).toUpperCase()\n    };\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  var isValidDate$c = core.utils.isValidDate;\n  /**\n   * Validate Chinese citizen identification number\n   *\n   * Rules:\n   * - For current 18-digit system (since 1st Oct 1999, defined by GB11643—1999 national standard):\n   *     - Digit 0-5: Must be a valid administrative division code of China PR.\n   *     - Digit 6-13: Must be a valid YYYYMMDD date of birth. A future date is tolerated.\n   *     - Digit 14-16: Order code, any integer.\n   *     - Digit 17: An ISO 7064:1983, MOD 11-2 checksum.\n   *       Both upper/lower case of X are tolerated.\n   * - For deprecated 15-digit system:\n   *     - Digit 0-5: Must be a valid administrative division code of China PR.\n   *     - Digit 6-11: Must be a valid YYMMDD date of birth, indicating the year of 19XX.\n   *     - Digit 12-14: Order code, any integer.\n   * Lists of valid administrative division codes of China PR can be seen here:\n   * <http://www.stats.gov.cn/tjsj/tjbz/xzqhdm/>\n   * Published and maintained by National Bureau of Statistics of China PR.\n   * NOTE: Current and deprecated codes MUST BOTH be considered valid.\n   * Many Chinese citizens born in once existed administrative divisions!\n   *\n   * @see http://en.wikipedia.org/wiki/Resident_Identity_Card#Identity_card_number\n   * @returns {ValidateResult}\n   */\n  function cnId(value) {\n    // Basic format check (18 or 15 digits, considering X in checksum)\n    var v = value.trim();\n    if (!/^\\d{15}$/.test(v) && !/^\\d{17}[\\dXx]{1}$/.test(v)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    // Check China PR Administrative division code\n    var adminDivisionCodes = {\n      11: {\n        0: [0],\n        1: [[0, 9], [11, 17]],\n        2: [0, 28, 29]\n      },\n      12: {\n        0: [0],\n        1: [[0, 16]],\n        2: [0, 21, 23, 25]\n      },\n      13: {\n        0: [0],\n        1: [[0, 5], 7, 8, 21, [23, 33], [81, 85]],\n        2: [[0, 5], [7, 9], [23, 25], 27, 29, 30, 81, 83],\n        3: [[0, 4], [21, 24]],\n        4: [[0, 4], 6, 21, [23, 35], 81],\n        5: [[0, 3], [21, 35], 81, 82],\n        6: [[0, 4], [21, 38], [81, 84]],\n        7: [[0, 3], 5, 6, [21, 33]],\n        8: [[0, 4], [21, 28]],\n        9: [[0, 3], [21, 30], [81, 84]],\n        10: [[0, 3], [22, 26], 28, 81, 82],\n        11: [[0, 2], [21, 28], 81, 82]\n      },\n      14: {\n        0: [0],\n        1: [0, 1, [5, 10], [21, 23], 81],\n        2: [[0, 3], 11, 12, [21, 27]],\n        3: [[0, 3], 11, 21, 22],\n        4: [[0, 2], 11, 21, [23, 31], 81],\n        5: [[0, 2], 21, 22, 24, 25, 81],\n        6: [[0, 3], [21, 24]],\n        7: [[0, 2], [21, 29], 81],\n        8: [[0, 2], [21, 30], 81, 82],\n        9: [[0, 2], [21, 32], 81],\n        10: [[0, 2], [21, 34], 81, 82],\n        11: [[0, 2], [21, 30], 81, 82],\n        23: [[0, 3], 22, 23, [25, 30], 32, 33]\n      },\n      15: {\n        0: [0],\n        1: [[0, 5], [21, 25]],\n        2: [[0, 7], [21, 23]],\n        3: [[0, 4]],\n        4: [[0, 4], [21, 26], [28, 30]],\n        5: [[0, 2], [21, 26], 81],\n        6: [[0, 2], [21, 27]],\n        7: [[0, 3], [21, 27], [81, 85]],\n        8: [[0, 2], [21, 26]],\n        9: [[0, 2], [21, 29], 81],\n        22: [[0, 2], [21, 24]],\n        25: [[0, 2], [22, 31]],\n        26: [[0, 2], [24, 27], [29, 32], 34],\n        28: [0, 1, [22, 27]],\n        29: [0, [21, 23]]\n      },\n      21: {\n        0: [0],\n        1: [[0, 6], [11, 14], [22, 24], 81],\n        2: [[0, 4], [11, 13], 24, [81, 83]],\n        3: [[0, 4], 11, 21, 23, 81],\n        4: [[0, 4], 11, [21, 23]],\n        5: [[0, 5], 21, 22],\n        6: [[0, 4], 24, 81, 82],\n        7: [[0, 3], 11, 26, 27, 81, 82],\n        8: [[0, 4], 11, 81, 82],\n        9: [[0, 5], 11, 21, 22],\n        10: [[0, 5], 11, 21, 81],\n        11: [[0, 3], 21, 22],\n        12: [[0, 2], 4, 21, 23, 24, 81, 82],\n        13: [[0, 3], 21, 22, 24, 81, 82],\n        14: [[0, 4], 21, 22, 81]\n      },\n      22: {\n        0: [0],\n        1: [[0, 6], 12, 22, [81, 83]],\n        2: [[0, 4], 11, 21, [81, 84]],\n        3: [[0, 3], 22, 23, 81, 82],\n        4: [[0, 3], 21, 22],\n        5: [[0, 3], 21, 23, 24, 81, 82],\n        6: [[0, 2], 4, 5, [21, 23], 25, 81],\n        7: [[0, 2], [21, 24], 81],\n        8: [[0, 2], 21, 22, 81, 82],\n        24: [[0, 6], 24, 26]\n      },\n      23: {\n        0: [0],\n        1: [[0, 12], 21, [23, 29], [81, 84]],\n        2: [[0, 8], 21, [23, 25], 27, [29, 31], 81],\n        3: [[0, 7], 21, 81, 82],\n        4: [[0, 7], 21, 22],\n        5: [[0, 3], 5, 6, [21, 24]],\n        6: [[0, 6], [21, 24]],\n        7: [[0, 16], 22, 81],\n        8: [[0, 5], 11, 22, 26, 28, 33, 81, 82],\n        9: [[0, 4], 21],\n        10: [[0, 5], 24, 25, 81, [83, 85]],\n        11: [[0, 2], 21, 23, 24, 81, 82],\n        12: [[0, 2], [21, 26], [81, 83]],\n        27: [[0, 4], [21, 23]]\n      },\n      31: {\n        0: [0],\n        1: [0, 1, [3, 10], [12, 20]],\n        2: [0, 30]\n      },\n      32: {\n        0: [0],\n        1: [[0, 7], 11, [13, 18], 24, 25],\n        2: [[0, 6], 11, 81, 82],\n        3: [[0, 5], 11, 12, [21, 24], 81, 82],\n        4: [[0, 2], 4, 5, 11, 12, 81, 82],\n        5: [[0, 9], [81, 85]],\n        6: [[0, 2], 11, 12, 21, 23, [81, 84]],\n        7: [0, 1, 3, 5, 6, [21, 24]],\n        8: [[0, 4], 11, 26, [29, 31]],\n        9: [[0, 3], [21, 25], 28, 81, 82],\n        10: [[0, 3], 11, 12, 23, 81, 84, 88],\n        11: [[0, 2], 11, 12, [81, 83]],\n        12: [[0, 4], [81, 84]],\n        13: [[0, 2], 11, [21, 24]]\n      },\n      33: {\n        0: [0],\n        1: [[0, 6], [8, 10], 22, 27, 82, 83, 85],\n        2: [0, 1, [3, 6], 11, 12, 25, 26, [81, 83]],\n        3: [[0, 4], 22, 24, [26, 29], 81, 82],\n        4: [[0, 2], 11, 21, 24, [81, 83]],\n        5: [[0, 3], [21, 23]],\n        6: [[0, 2], 21, 24, [81, 83]],\n        7: [[0, 3], 23, 26, 27, [81, 84]],\n        8: [[0, 3], 22, 24, 25, 81],\n        9: [[0, 3], 21, 22],\n        10: [[0, 4], [21, 24], 81, 82],\n        11: [[0, 2], [21, 27], 81]\n      },\n      34: {\n        0: [0],\n        1: [[0, 4], 11, [21, 24], 81],\n        2: [[0, 4], 7, 8, [21, 23], 25],\n        3: [[0, 4], 11, [21, 23]],\n        4: [[0, 6], 21],\n        5: [[0, 4], 6, [21, 23]],\n        6: [[0, 4], 21],\n        7: [[0, 3], 11, 21],\n        8: [[0, 3], 11, [22, 28], 81],\n        10: [[0, 4], [21, 24]],\n        11: [[0, 3], 22, [24, 26], 81, 82],\n        12: [[0, 4], 21, 22, 25, 26, 82],\n        13: [[0, 2], [21, 24]],\n        14: [[0, 2], [21, 24]],\n        15: [[0, 3], [21, 25]],\n        16: [[0, 2], [21, 23]],\n        17: [[0, 2], [21, 23]],\n        18: [[0, 2], [21, 25], 81]\n      },\n      35: {\n        0: [0],\n        1: [[0, 5], 11, [21, 25], 28, 81, 82],\n        2: [[0, 6], [11, 13]],\n        3: [[0, 5], 22],\n        4: [[0, 3], 21, [23, 30], 81],\n        5: [[0, 5], 21, [24, 27], [81, 83]],\n        6: [[0, 3], [22, 29], 81],\n        7: [[0, 2], [21, 25], [81, 84]],\n        8: [[0, 2], [21, 25], 81],\n        9: [[0, 2], [21, 26], 81, 82]\n      },\n      36: {\n        0: [0],\n        1: [[0, 5], 11, [21, 24]],\n        2: [[0, 3], 22, 81],\n        3: [[0, 2], 13, [21, 23]],\n        4: [[0, 3], 21, [23, 30], 81, 82],\n        5: [[0, 2], 21],\n        6: [[0, 2], 22, 81],\n        7: [[0, 2], [21, 35], 81, 82],\n        8: [[0, 3], [21, 30], 81],\n        9: [[0, 2], [21, 26], [81, 83]],\n        10: [[0, 2], [21, 30]],\n        11: [[0, 2], [21, 30], 81]\n      },\n      37: {\n        0: [0],\n        1: [[0, 5], 12, 13, [24, 26], 81],\n        2: [[0, 3], 5, [11, 14], [81, 85]],\n        3: [[0, 6], [21, 23]],\n        4: [[0, 6], 81],\n        5: [[0, 3], [21, 23]],\n        6: [[0, 2], [11, 13], 34, [81, 87]],\n        7: [[0, 5], 24, 25, [81, 86]],\n        8: [[0, 2], 11, [26, 32], [81, 83]],\n        9: [[0, 3], 11, 21, 23, 82, 83],\n        10: [[0, 2], [81, 83]],\n        11: [[0, 3], 21, 22],\n        12: [[0, 3]],\n        13: [[0, 2], 11, 12, [21, 29]],\n        14: [[0, 2], [21, 28], 81, 82],\n        15: [[0, 2], [21, 26], 81],\n        16: [[0, 2], [21, 26]],\n        17: [[0, 2], [21, 28]]\n      },\n      41: {\n        0: [0],\n        1: [[0, 6], 8, 22, [81, 85]],\n        2: [[0, 5], 11, [21, 25]],\n        3: [[0, 7], 11, [22, 29], 81],\n        4: [[0, 4], 11, [21, 23], 25, 81, 82],\n        5: [[0, 3], 5, 6, 22, 23, 26, 27, 81],\n        6: [[0, 3], 11, 21, 22],\n        7: [[0, 4], 11, 21, [24, 28], 81, 82],\n        8: [[0, 4], 11, [21, 23], 25, [81, 83]],\n        9: [[0, 2], 22, 23, [26, 28]],\n        10: [[0, 2], [23, 25], 81, 82],\n        11: [[0, 4], [21, 23]],\n        12: [[0, 2], 21, 22, 24, 81, 82],\n        13: [[0, 3], [21, 30], 81],\n        14: [[0, 3], [21, 26], 81],\n        15: [[0, 3], [21, 28]],\n        16: [[0, 2], [21, 28], 81],\n        17: [[0, 2], [21, 29]],\n        90: [0, 1]\n      },\n      42: {\n        0: [0],\n        1: [[0, 7], [11, 17]],\n        2: [[0, 5], 22, 81],\n        3: [[0, 3], [21, 25], 81],\n        5: [[0, 6], [25, 29], [81, 83]],\n        6: [[0, 2], 6, 7, [24, 26], [82, 84]],\n        7: [[0, 4]],\n        8: [[0, 2], 4, 21, 22, 81],\n        9: [[0, 2], [21, 23], 81, 82, 84],\n        10: [[0, 3], [22, 24], 81, 83, 87],\n        11: [[0, 2], [21, 27], 81, 82],\n        12: [[0, 2], [21, 24], 81],\n        13: [[0, 3], 21, 81],\n        28: [[0, 2], 22, 23, [25, 28]],\n        90: [0, [4, 6], 21]\n      },\n      43: {\n        0: [0],\n        1: [[0, 5], 11, 12, 21, 22, 24, 81],\n        2: [[0, 4], 11, 21, [23, 25], 81],\n        3: [[0, 2], 4, 21, 81, 82],\n        4: [0, 1, [5, 8], 12, [21, 24], 26, 81, 82],\n        5: [[0, 3], 11, [21, 25], [27, 29], 81],\n        6: [[0, 3], 11, 21, 23, 24, 26, 81, 82],\n        7: [[0, 3], [21, 26], 81],\n        8: [[0, 2], 11, 21, 22],\n        9: [[0, 3], [21, 23], 81],\n        10: [[0, 3], [21, 28], 81],\n        11: [[0, 3], [21, 29]],\n        12: [[0, 2], [21, 30], 81],\n        13: [[0, 2], 21, 22, 81, 82],\n        31: [0, 1, [22, 27], 30]\n      },\n      44: {\n        0: [0],\n        1: [[0, 7], [11, 16], 83, 84],\n        2: [[0, 5], 21, 22, 24, 29, 32, 33, 81, 82],\n        3: [0, 1, [3, 8]],\n        4: [[0, 4]],\n        5: [0, 1, [6, 15], 23, 82, 83],\n        6: [0, 1, [4, 8]],\n        7: [0, 1, [3, 5], 81, [83, 85]],\n        8: [[0, 4], 11, 23, 25, [81, 83]],\n        9: [[0, 3], 23, [81, 83]],\n        12: [[0, 3], [23, 26], 83, 84],\n        13: [[0, 3], [22, 24], 81],\n        14: [[0, 2], [21, 24], 26, 27, 81],\n        15: [[0, 2], 21, 23, 81],\n        16: [[0, 2], [21, 25]],\n        17: [[0, 2], 21, 23, 81],\n        18: [[0, 3], 21, 23, [25, 27], 81, 82],\n        19: [0],\n        20: [0],\n        51: [[0, 3], 21, 22],\n        52: [[0, 3], 21, 22, 24, 81],\n        53: [[0, 2], [21, 23], 81]\n      },\n      45: {\n        0: [0],\n        1: [[0, 9], [21, 27]],\n        2: [[0, 5], [21, 26]],\n        3: [[0, 5], 11, 12, [21, 32]],\n        4: [0, 1, [3, 6], 11, [21, 23], 81],\n        5: [[0, 3], 12, 21],\n        6: [[0, 3], 21, 81],\n        7: [[0, 3], 21, 22],\n        8: [[0, 4], 21, 81],\n        9: [[0, 3], [21, 24], 81],\n        10: [[0, 2], [21, 31]],\n        11: [[0, 2], [21, 23]],\n        12: [[0, 2], [21, 29], 81],\n        13: [[0, 2], [21, 24], 81],\n        14: [[0, 2], [21, 25], 81]\n      },\n      46: {\n        0: [0],\n        1: [0, 1, [5, 8]],\n        2: [0, 1],\n        3: [0, [21, 23]],\n        90: [[0, 3], [5, 7], [21, 39]]\n      },\n      50: {\n        0: [0],\n        1: [[0, 19]],\n        2: [0, [22, 38], [40, 43]],\n        3: [0, [81, 84]]\n      },\n      51: {\n        0: [0],\n        1: [0, 1, [4, 8], [12, 15], [21, 24], 29, 31, 32, [81, 84]],\n        3: [[0, 4], 11, 21, 22],\n        4: [[0, 3], 11, 21, 22],\n        5: [[0, 4], 21, 22, 24, 25],\n        6: [0, 1, 3, 23, 26, [81, 83]],\n        7: [0, 1, 3, 4, [22, 27], 81],\n        8: [[0, 2], 11, 12, [21, 24]],\n        9: [[0, 4], [21, 23]],\n        10: [[0, 2], 11, 24, 25, 28],\n        11: [[0, 2], [11, 13], 23, 24, 26, 29, 32, 33, 81],\n        13: [[0, 4], [21, 25], 81],\n        14: [[0, 2], [21, 25]],\n        15: [[0, 3], [21, 29]],\n        16: [[0, 3], [21, 23], 81],\n        17: [[0, 3], [21, 25], 81],\n        18: [[0, 3], [21, 27]],\n        19: [[0, 3], [21, 23]],\n        20: [[0, 2], 21, 22, 81],\n        32: [0, [21, 33]],\n        33: [0, [21, 38]],\n        34: [0, 1, [22, 37]]\n      },\n      52: {\n        0: [0],\n        1: [[0, 3], [11, 15], [21, 23], 81],\n        2: [0, 1, 3, 21, 22],\n        3: [[0, 3], [21, 30], 81, 82],\n        4: [[0, 2], [21, 25]],\n        5: [[0, 2], [21, 27]],\n        6: [[0, 3], [21, 28]],\n        22: [0, 1, [22, 30]],\n        23: [0, 1, [22, 28]],\n        24: [0, 1, [22, 28]],\n        26: [0, 1, [22, 36]],\n        27: [[0, 2], 22, 23, [25, 32]]\n      },\n      53: {\n        0: [0],\n        1: [[0, 3], [11, 14], 21, 22, [24, 29], 81],\n        3: [[0, 2], [21, 26], 28, 81],\n        4: [[0, 2], [21, 28]],\n        5: [[0, 2], [21, 24]],\n        6: [[0, 2], [21, 30]],\n        7: [[0, 2], [21, 24]],\n        8: [[0, 2], [21, 29]],\n        9: [[0, 2], [21, 27]],\n        23: [0, 1, [22, 29], 31],\n        25: [[0, 4], [22, 32]],\n        26: [0, 1, [21, 28]],\n        27: [0, 1, [22, 30]],\n        28: [0, 1, 22, 23],\n        29: [0, 1, [22, 32]],\n        31: [0, 2, 3, [22, 24]],\n        34: [0, [21, 23]],\n        33: [0, 21, [23, 25]],\n        35: [0, [21, 28]]\n      },\n      54: {\n        0: [0],\n        1: [[0, 2], [21, 27]],\n        21: [0, [21, 29], 32, 33],\n        22: [0, [21, 29], [31, 33]],\n        23: [0, 1, [22, 38]],\n        24: [0, [21, 31]],\n        25: [0, [21, 27]],\n        26: [0, [21, 27]]\n      },\n      61: {\n        0: [0],\n        1: [[0, 4], [11, 16], 22, [24, 26]],\n        2: [[0, 4], 22],\n        3: [[0, 4], [21, 24], [26, 31]],\n        4: [[0, 4], [22, 31], 81],\n        5: [[0, 2], [21, 28], 81, 82],\n        6: [[0, 2], [21, 32]],\n        7: [[0, 2], [21, 30]],\n        8: [[0, 2], [21, 31]],\n        9: [[0, 2], [21, 29]],\n        10: [[0, 2], [21, 26]]\n      },\n      62: {\n        0: [0],\n        1: [[0, 5], 11, [21, 23]],\n        2: [0, 1],\n        3: [[0, 2], 21],\n        4: [[0, 3], [21, 23]],\n        5: [[0, 3], [21, 25]],\n        6: [[0, 2], [21, 23]],\n        7: [[0, 2], [21, 25]],\n        8: [[0, 2], [21, 26]],\n        9: [[0, 2], [21, 24], 81, 82],\n        10: [[0, 2], [21, 27]],\n        11: [[0, 2], [21, 26]],\n        12: [[0, 2], [21, 28]],\n        24: [0, 21, [24, 29]],\n        26: [0, 21, [23, 30]],\n        29: [0, 1, [21, 27]],\n        30: [0, 1, [21, 27]]\n      },\n      63: {\n        0: [0],\n        1: [[0, 5], [21, 23]],\n        2: [0, 2, [21, 25]],\n        21: [0, [21, 23], [26, 28]],\n        22: [0, [21, 24]],\n        23: [0, [21, 24]],\n        25: [0, [21, 25]],\n        26: [0, [21, 26]],\n        27: [0, 1, [21, 26]],\n        28: [[0, 2], [21, 23]]\n      },\n      64: {\n        0: [0],\n        1: [0, 1, [4, 6], 21, 22, 81],\n        2: [[0, 3], 5, [21, 23]],\n        3: [[0, 3], [21, 24], 81],\n        4: [[0, 2], [21, 25]],\n        5: [[0, 2], 21, 22]\n      },\n      65: {\n        0: [0],\n        1: [[0, 9], 21],\n        2: [[0, 5]],\n        21: [0, 1, 22, 23],\n        22: [0, 1, 22, 23],\n        23: [[0, 3], [23, 25], 27, 28],\n        28: [0, 1, [22, 29]],\n        29: [0, 1, [22, 29]],\n        30: [0, 1, [22, 24]],\n        31: [0, 1, [21, 31]],\n        32: [0, 1, [21, 27]],\n        40: [0, 2, 3, [21, 28]],\n        42: [[0, 2], 21, [23, 26]],\n        43: [0, 1, [21, 26]],\n        90: [[0, 4]],\n        27: [[0, 2], 22, 23]\n      },\n      71: {\n        0: [0]\n      },\n      81: {\n        0: [0]\n      },\n      82: {\n        0: [0]\n      }\n    };\n    var provincial = parseInt(v.substr(0, 2), 10);\n    var prefectural = parseInt(v.substr(2, 2), 10);\n    var county = parseInt(v.substr(4, 2), 10);\n    if (!adminDivisionCodes[provincial] || !adminDivisionCodes[provincial][prefectural]) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    var inRange = false;\n    var rangeDef = adminDivisionCodes[provincial][prefectural];\n    var i;\n    for (i = 0; i < rangeDef.length; i++) {\n      if (Array.isArray(rangeDef[i]) && rangeDef[i][0] <= county && county <= rangeDef[i][1] || !Array.isArray(rangeDef[i]) && county === rangeDef[i]) {\n        inRange = true;\n        break;\n      }\n    }\n    if (!inRange) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    // Check date of birth\n    var dob;\n    if (v.length === 18) {\n      dob = v.substr(6, 8);\n    } /* length == 15 */else {\n      dob = \"19\".concat(v.substr(6, 6));\n    }\n    var year = parseInt(dob.substr(0, 4), 10);\n    var month = parseInt(dob.substr(4, 2), 10);\n    var day = parseInt(dob.substr(6, 2), 10);\n    if (!isValidDate$c(year, month, day)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    // Check checksum (18-digit system only)\n    if (v.length === 18) {\n      var weight = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2];\n      var sum = 0;\n      for (i = 0; i < 17; i++) {\n        sum += parseInt(v.charAt(i), 10) * weight[i];\n      }\n      sum = (12 - sum % 11) % 11;\n      var checksum = v.charAt(17).toUpperCase() !== 'X' ? parseInt(v.charAt(17), 10) : 10;\n      return {\n        meta: {},\n        valid: checksum === sum\n      };\n    }\n    return {\n      meta: {},\n      valid: true\n    };\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  /**\n   * Validate Colombian identification number (NIT)\n   * @see https://es.wikipedia.org/wiki/N%C3%BAmero_de_Identificaci%C3%B3n_Tributaria\n   * @returns {ValidateResult}\n   */\n  function coId(value) {\n    var v = value.replace(/\\./g, '').replace('-', '');\n    if (!/^\\d{8,16}$/.test(v)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    var length = v.length;\n    var weight = [3, 7, 13, 17, 19, 23, 29, 37, 41, 43, 47, 53, 59, 67, 71];\n    var sum = 0;\n    for (var i = length - 2; i >= 0; i--) {\n      sum += parseInt(v.charAt(i), 10) * weight[i];\n    }\n    sum = sum % 11;\n    if (sum >= 2) {\n      sum = 11 - sum;\n    }\n    return {\n      meta: {},\n      valid: \"\".concat(sum) === v.substr(length - 1)\n    };\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  var isValidDate$b = core.utils.isValidDate;\n  /**\n   * Validate Czech national identification number (RC)\n   *\n   * @returns {ValidateResult}\n   */\n  function czId(value) {\n    if (!/^\\d{9,10}$/.test(value)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    var year = 1900 + parseInt(value.substr(0, 2), 10);\n    var month = parseInt(value.substr(2, 2), 10) % 50 % 20;\n    var day = parseInt(value.substr(4, 2), 10);\n    if (value.length === 9) {\n      if (year >= 1980) {\n        year -= 100;\n      }\n      if (year > 1953) {\n        return {\n          meta: {},\n          valid: false\n        };\n      }\n    } else if (year < 1954) {\n      year += 100;\n    }\n    if (!isValidDate$b(year, month, day)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    // Check that the birth date is not in the future\n    if (value.length === 10) {\n      var check = parseInt(value.substr(0, 9), 10) % 11;\n      if (year < 1985) {\n        check = check % 10;\n      }\n      return {\n        meta: {},\n        valid: \"\".concat(check) === value.substr(9, 1)\n      };\n    }\n    return {\n      meta: {},\n      valid: true\n    };\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  var isValidDate$a = core.utils.isValidDate;\n  /**\n   * Validate Danish Personal Identification number (CPR)\n   *\n   * @see https://en.wikipedia.org/wiki/Personal_identification_number_(Denmark)\n   * @returns {ValidateResult}\n   */\n  function dkId(value) {\n    if (!/^[0-9]{6}[-]{0,1}[0-9]{4}$/.test(value)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    var v = value.replace(/-/g, '');\n    var day = parseInt(v.substr(0, 2), 10);\n    var month = parseInt(v.substr(2, 2), 10);\n    var year = parseInt(v.substr(4, 2), 10);\n    switch (true) {\n      case '5678'.indexOf(v.charAt(6)) !== -1 && year >= 58:\n        year += 1800;\n        break;\n      case '0123'.indexOf(v.charAt(6)) !== -1:\n      case '49'.indexOf(v.charAt(6)) !== -1 && year >= 37:\n        year += 1900;\n        break;\n      default:\n        year += 2000;\n        break;\n    }\n    return {\n      meta: {},\n      valid: isValidDate$a(year, month, day)\n    };\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  /**\n   * Validate Spanish personal identity code (DNI)\n   * Support DNI (for Spanish citizens), NIE (for foreign people) and CIF (for legal entities)\n   *\n   * @see https://en.wikipedia.org/wiki/National_identification_number#Spain\n   * @returns {ValidateResult}\n   */\n  function esId(value) {\n    var isDNI = /^[0-9]{8}[-]{0,1}[A-HJ-NP-TV-Z]$/.test(value);\n    var isNIE = /^[XYZ][-]{0,1}[0-9]{7}[-]{0,1}[A-HJ-NP-TV-Z]$/.test(value);\n    var isCIF = /^[A-HNPQS][-]{0,1}[0-9]{7}[-]{0,1}[0-9A-J]$/.test(value);\n    if (!isDNI && !isNIE && !isCIF) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    var v = value.replace(/-/g, '');\n    var check;\n    var tpe;\n    var isValid = true;\n    if (isDNI || isNIE) {\n      tpe = 'DNI';\n      var index = 'XYZ'.indexOf(v.charAt(0));\n      if (index !== -1) {\n        // It is NIE number\n        v = index + v.substr(1) + '';\n        tpe = 'NIE';\n      }\n      check = parseInt(v.substr(0, 8), 10);\n      check = 'TRWAGMYFPDXBNJZSQVHLCKE'[check % 23];\n      return {\n        meta: {\n          type: tpe\n        },\n        valid: check === v.substr(8, 1)\n      };\n    } else {\n      check = v.substr(1, 7);\n      tpe = 'CIF';\n      var letter = v[0];\n      var control = v.substr(-1);\n      var sum = 0;\n      // The digits in the even positions are added to the sum directly.\n      // The ones in the odd positions are multiplied by 2 and then added to the sum.\n      // If the result of multiplying by 2 is 10 or higher, add the two digits\n      // together and add that to the sum instead\n      for (var i = 0; i < check.length; i++) {\n        if (i % 2 !== 0) {\n          sum += parseInt(check[i], 10);\n        } else {\n          var tmp = '' + parseInt(check[i], 10) * 2;\n          sum += parseInt(tmp[0], 10);\n          if (tmp.length === 2) {\n            sum += parseInt(tmp[1], 10);\n          }\n        }\n      }\n      // The control digit is calculated from the last digit of the sum.\n      // If that last digit is not 0, subtract it from 10\n      var lastDigit = sum - Math.floor(sum / 10) * 10;\n      if (lastDigit !== 0) {\n        lastDigit = 10 - lastDigit;\n      }\n      if ('KQS'.indexOf(letter) !== -1) {\n        // If the CIF starts with a K, Q or S, the control digit must be a letter\n        isValid = control === 'JABCDEFGHI'[lastDigit];\n      } else if ('ABEH'.indexOf(letter) !== -1) {\n        // If it starts with A, B, E or H, it has to be a number\n        isValid = control === '' + lastDigit;\n      } else {\n        // In any other case, it doesn't matter\n        isValid = control === '' + lastDigit || control === 'JABCDEFGHI'[lastDigit];\n      }\n      return {\n        meta: {\n          type: tpe\n        },\n        valid: isValid\n      };\n    }\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  var isValidDate$9 = core.utils.isValidDate;\n  /**\n   * Validate Finnish Personal Identity Code (HETU)\n   *\n   * @returns {ValidateResult}\n   */\n  function fiId(value) {\n    if (!/^[0-9]{6}[-+A][0-9]{3}[0-9ABCDEFHJKLMNPRSTUVWXY]$/.test(value)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    var day = parseInt(value.substr(0, 2), 10);\n    var month = parseInt(value.substr(2, 2), 10);\n    var year = parseInt(value.substr(4, 2), 10);\n    var centuries = {\n      '+': 1800,\n      '-': 1900,\n      A: 2000\n    };\n    year = centuries[value.charAt(6)] + year;\n    if (!isValidDate$9(year, month, day)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    var individual = parseInt(value.substr(7, 3), 10);\n    if (individual < 2) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    var n = parseInt(value.substr(0, 6) + value.substr(7, 3) + '', 10);\n    return {\n      meta: {},\n      valid: '0123456789ABCDEFHJKLMNPRSTUVWXY'.charAt(n % 31) === value.charAt(10)\n    };\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  /**\n   * Validate French identification number (NIR)\n   *\n   * @see https://en.wikipedia.org/wiki/INSEE_code\n   * @see https://fr.wikipedia.org/wiki/Num%C3%A9ro_de_s%C3%A9curit%C3%A9_sociale_en_France\n   * @returns {ValidateResult}\n   */\n  function frId(value) {\n    var v = value.toUpperCase();\n    if (!/^(1|2)\\d{2}\\d{2}(\\d{2}|\\d[A-Z]|\\d{3})\\d{2,3}\\d{3}\\d{2}$/.test(v)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    // The COG group can be 2 digits or 2A or 2B\n    var cog = v.substr(5, 2);\n    switch (true) {\n      case /^\\d{2}$/.test(cog):\n        v = value;\n        break;\n      case cog === '2A':\n        v = \"\".concat(value.substr(0, 5), \"19\").concat(value.substr(7));\n        break;\n      case cog === '2B':\n        v = \"\".concat(value.substr(0, 5), \"18\").concat(value.substr(7));\n        break;\n      default:\n        return {\n          meta: {},\n          valid: false\n        };\n    }\n    var mod = 97 - parseInt(v.substr(0, 13), 10) % 97;\n    var prefixWithZero = mod < 10 ? \"0\".concat(mod) : \"\".concat(mod);\n    return {\n      meta: {},\n      valid: prefixWithZero === v.substr(13)\n    };\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  /**\n   * Validate Hong Kong identity card number (HKID)\n   *\n   * @see https://en.wikipedia.org/wiki/National_identification_number#Hong_Kong\n   * @returns {ValidateResult}\n   */\n  function hkId(value) {\n    var v = value.toUpperCase();\n    if (!/^[A-MP-Z]{1,2}[0-9]{6}[0-9A]$/.test(v)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    var alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    var firstChar = v.charAt(0);\n    var secondChar = v.charAt(1);\n    var sum = 0;\n    var digitParts = v;\n    if (/^[A-Z]$/.test(secondChar)) {\n      sum += 9 * (10 + alphabet.indexOf(firstChar));\n      sum += 8 * (10 + alphabet.indexOf(secondChar));\n      digitParts = v.substr(2);\n    } else {\n      sum += 9 * 36;\n      sum += 8 * (10 + alphabet.indexOf(firstChar));\n      digitParts = v.substr(1);\n    }\n    var length = digitParts.length;\n    for (var i = 0; i < length - 1; i++) {\n      sum += (7 - i) * parseInt(digitParts.charAt(i), 10);\n    }\n    var remaining = sum % 11;\n    var checkDigit = remaining === 0 ? '0' : 11 - remaining === 10 ? 'A' : \"\".concat(11 - remaining);\n    return {\n      meta: {},\n      valid: checkDigit === digitParts.charAt(length - 1)\n    };\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  var mod11And10 = core.algorithms.mod11And10;\n  /**\n   * Validate Croatian personal identification number (OIB)\n   *\n   * @returns {ValidateResult}\n   */\n  function hrId(value) {\n    return {\n      meta: {},\n      valid: /^[0-9]{11}$/.test(value) && mod11And10(value)\n    };\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  var verhoeff = core.algorithms.verhoeff;\n  /**\n   * Validate Indian Aadhaar numbers\n   * @see https://en.wikipedia.org/wiki/Aadhaar\n   * @returns {ValidateResult}\n   */\n  function idId(value) {\n    if (!/^[2-9]\\d{11}$/.test(value)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    var converted = value.split('').map(function (item) {\n      return parseInt(item, 10);\n    });\n    return {\n      meta: {},\n      valid: verhoeff(converted)\n    };\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  /**\n   * Validate Irish Personal Public Service Number (PPS)\n   *\n   * @see https://en.wikipedia.org/wiki/Personal_Public_Service_Number\n   * @returns {ValidateResult}\n   */\n  function ieId(value) {\n    if (!/^\\d{7}[A-W][AHWTX]?$/.test(value)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    var getCheckDigit = function getCheckDigit(v) {\n      var input = v;\n      while (input.length < 7) {\n        input = \"0\".concat(input);\n      }\n      var alphabet = 'WABCDEFGHIJKLMNOPQRSTUV';\n      var sum = 0;\n      for (var i = 0; i < 7; i++) {\n        sum += parseInt(input.charAt(i), 10) * (8 - i);\n      }\n      sum += 9 * alphabet.indexOf(input.substr(7));\n      return alphabet[sum % 23];\n    };\n    // 2013 format\n    var isValid = value.length === 9 && ('A' === value.charAt(8) || 'H' === value.charAt(8)) ? value.charAt(7) === getCheckDigit(value.substr(0, 7) + value.substr(8) + '') :\n    // The old format\n    value.charAt(7) === getCheckDigit(value.substr(0, 7));\n    return {\n      meta: {},\n      valid: isValid\n    };\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  var luhn$2 = core.algorithms.luhn;\n  /**\n   * Validate Israeli identity number (Mispar Zehut)\n   *\n   * @see https://gist.github.com/freak4pc/6802be89d019bca57756a675d761c5a8\n   * @see http://halemo.net/info/idcard/\n   * @returns {ValidateResult}\n   */\n  function ilId(value) {\n    if (!/^\\d{1,9}$/.test(value)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    return {\n      meta: {},\n      valid: luhn$2(value)\n    };\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  var isValidDate$8 = core.utils.isValidDate;\n  /**\n   * Validate Iceland national identification number (Kennitala)\n   *\n   * @see http://en.wikipedia.org/wiki/Kennitala\n   * @returns {ValidateResult}\n   */\n  function isId(value) {\n    if (!/^[0-9]{6}[-]{0,1}[0-9]{4}$/.test(value)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    var v = value.replace(/-/g, '');\n    var day = parseInt(v.substr(0, 2), 10);\n    var month = parseInt(v.substr(2, 2), 10);\n    var year = parseInt(v.substr(4, 2), 10);\n    var century = parseInt(v.charAt(9), 10);\n    year = century === 9 ? 1900 + year : (20 + century) * 100 + year;\n    if (!isValidDate$8(year, month, day, true)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    // Validate the check digit\n    var weight = [3, 2, 7, 6, 5, 4, 3, 2];\n    var sum = 0;\n    for (var i = 0; i < 8; i++) {\n      sum += parseInt(v.charAt(i), 10) * weight[i];\n    }\n    sum = 11 - sum % 11;\n    return {\n      meta: {},\n      valid: \"\".concat(sum) === v.charAt(8)\n    };\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  var isValidDate$7 = core.utils.isValidDate;\n  /**\n   * Validate Korean registration number (RRN)\n   *\n   * @see https://en.wikipedia.org/wiki/Resident_registration_number\n   * @returns {ValidateResult}\n   */\n  function krId(value) {\n    var v = value.replace('-', '');\n    if (!/^\\d{13}$/.test(v)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    // Check the date of birth\n    var sDigit = v.charAt(6);\n    var year = parseInt(v.substr(0, 2), 10);\n    var month = parseInt(v.substr(2, 2), 10);\n    var day = parseInt(v.substr(4, 2), 10);\n    switch (sDigit) {\n      case '1':\n      case '2':\n      case '5':\n      case '6':\n        year += 1900;\n        break;\n      case '3':\n      case '4':\n      case '7':\n      case '8':\n        year += 2000;\n        break;\n      default:\n        year += 1800;\n        break;\n    }\n    if (!isValidDate$7(year, month, day)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    // Calculate the check digit\n    var weight = [2, 3, 4, 5, 6, 7, 8, 9, 2, 3, 4, 5];\n    var length = v.length;\n    var sum = 0;\n    for (var i = 0; i < length - 1; i++) {\n      sum += weight[i] * parseInt(v.charAt(i), 10);\n    }\n    var checkDigit = (11 - sum % 11) % 10;\n    return {\n      meta: {},\n      valid: \"\".concat(checkDigit) === v.charAt(length - 1)\n    };\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  var isValidDate$6 = core.utils.isValidDate;\n  /**\n   * Validate Lithuanian Personal Code (Asmens kodas)\n   *\n   * @see http://en.wikipedia.org/wiki/National_identification_number#Lithuania\n   * @see http://www.adomas.org/midi2007/pcode.html\n   * @returns {ValidateResult}\n   */\n  function ltId(value) {\n    if (!/^[0-9]{11}$/.test(value)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    var gender = parseInt(value.charAt(0), 10);\n    var year = parseInt(value.substr(1, 2), 10);\n    var month = parseInt(value.substr(3, 2), 10);\n    var day = parseInt(value.substr(5, 2), 10);\n    var century = gender % 2 === 0 ? 17 + gender / 2 : 17 + (gender + 1) / 2;\n    year = century * 100 + year;\n    if (!isValidDate$6(year, month, day, true)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    // Validate the check digit\n    var weight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 1];\n    var sum = 0;\n    var i;\n    for (i = 0; i < 10; i++) {\n      sum += parseInt(value.charAt(i), 10) * weight[i];\n    }\n    sum = sum % 11;\n    if (sum !== 10) {\n      return {\n        meta: {},\n        valid: \"\".concat(sum) === value.charAt(10)\n      };\n    }\n    // Re-calculate the check digit\n    sum = 0;\n    weight = [3, 4, 5, 6, 7, 8, 9, 1, 2, 3];\n    for (i = 0; i < 10; i++) {\n      sum += parseInt(value.charAt(i), 10) * weight[i];\n    }\n    sum = sum % 11;\n    if (sum === 10) {\n      sum = 0;\n    }\n    return {\n      meta: {},\n      valid: \"\".concat(sum) === value.charAt(10)\n    };\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  var isValidDate$5 = core.utils.isValidDate;\n  /**\n   * Validate Latvian Personal Code (Personas kods)\n   *\n   * @see http://laacz.lv/2006/11/25/pk-parbaudes-algoritms/\n   * @returns {ValidateResult}\n   */\n  function lvId(value) {\n    if (!/^[0-9]{6}[-]{0,1}[0-9]{5}$/.test(value)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    var v = value.replace(/\\D/g, '');\n    // Check birth date\n    var day = parseInt(v.substr(0, 2), 10);\n    var month = parseInt(v.substr(2, 2), 10);\n    var year = parseInt(v.substr(4, 2), 10);\n    year = year + 1800 + parseInt(v.charAt(6), 10) * 100;\n    if (!isValidDate$5(year, month, day, true)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    // Check personal code\n    var sum = 0;\n    var weight = [10, 5, 8, 4, 2, 1, 6, 3, 7, 9];\n    for (var i = 0; i < 10; i++) {\n      sum += parseInt(v.charAt(i), 10) * weight[i];\n    }\n    sum = (sum + 1) % 11 % 10;\n    return {\n      meta: {},\n      valid: \"\".concat(sum) === v.charAt(10)\n    };\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  /**\n   * @returns {ValidateResult}\n   */\n  function meId(value) {\n    return {\n      meta: {},\n      valid: jmbg(value, 'ME')\n    };\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  /**\n   * @returns {ValidateResult}\n   */\n  function mkId(value) {\n    return {\n      meta: {},\n      valid: jmbg(value, 'MK')\n    };\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  var isValidDate$4 = core.utils.isValidDate;\n  /**\n   * Validate Mexican ID number (CURP)\n   *\n   * @see https://en.wikipedia.org/wiki/Unique_Population_Registry_Code\n   * @returns {ValidateResult}\n   */\n  function mxId(value) {\n    var v = value.toUpperCase();\n    if (!/^[A-Z]{4}\\d{6}[A-Z]{6}[0-9A-Z]\\d$/.test(v)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    // Check if the combination of initial names belongs to a back list\n    // See\n    // http://quemamadera.blogspot.com/2008/02/las-palabras-inconvenientes-del-curp.html\n    // https://www.reddit.com/r/mexico/comments/bo8cv/hoy_aprendi_que_existe_un_catalogo_de_palabras/\n    var blacklistNames = ['BACA', 'BAKA', 'BUEI', 'BUEY', 'CACA', 'CACO', 'CAGA', 'CAGO', 'CAKA', 'CAKO', 'COGE', 'COGI', 'COJA', 'COJE', 'COJI', 'COJO', 'COLA', 'CULO', 'FALO', 'FETO', 'GETA', 'GUEI', 'GUEY', 'JETA', 'JOTO', 'KACA', 'KACO', 'KAGA', 'KAGO', 'KAKA', 'KAKO', 'KOGE', 'KOGI', 'KOJA', 'KOJE', 'KOJI', 'KOJO', 'KOLA', 'KULO', 'LILO', 'LOCA', 'LOCO', 'LOKA', 'LOKO', 'MAME', 'MAMO', 'MEAR', 'MEAS', 'MEON', 'MIAR', 'MION', 'MOCO', 'MOKO', 'MULA', 'MULO', 'NACA', 'NACO', 'PEDA', 'PEDO', 'PENE', 'PIPI', 'PITO', 'POPO', 'PUTA', 'PUTO', 'QULO', 'RATA', 'ROBA', 'ROBE', 'ROBO', 'RUIN', 'SENO', 'TETA', 'VACA', 'VAGA', 'VAGO', 'VAKA', 'VUEI', 'VUEY', 'WUEI', 'WUEY'];\n    var name = v.substr(0, 4);\n    if (blacklistNames.indexOf(name) >= 0) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    // Check the date of birth\n    var year = parseInt(v.substr(4, 2), 10);\n    var month = parseInt(v.substr(6, 2), 10);\n    var day = parseInt(v.substr(6, 2), 10);\n    if (/^[0-9]$/.test(v.charAt(16))) {\n      year += 1900;\n    } else {\n      year += 2000;\n    }\n    if (!isValidDate$4(year, month, day)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    // Check the gender\n    var gender = v.charAt(10);\n    if (gender !== 'H' && gender !== 'M') {\n      // H for male, M for female\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    // Check the state\n    var state = v.substr(11, 2);\n    var states = ['AS', 'BC', 'BS', 'CC', 'CH', 'CL', 'CM', 'CS', 'DF', 'DG', 'GR', 'GT', 'HG', 'JC', 'MC', 'MN', 'MS', 'NE', 'NL', 'NT', 'OC', 'PL', 'QR', 'QT', 'SL', 'SP', 'SR', 'TC', 'TL', 'TS', 'VZ', 'YN', 'ZS'];\n    if (states.indexOf(state) === -1) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    // Calculate the check digit\n    var alphabet = '0123456789ABCDEFGHIJKLMN&OPQRSTUVWXYZ';\n    var sum = 0;\n    var length = v.length;\n    for (var i = 0; i < length - 1; i++) {\n      sum += (18 - i) * alphabet.indexOf(v.charAt(i));\n    }\n    sum = (10 - sum % 10) % 10;\n    return {\n      meta: {},\n      valid: \"\".concat(sum) === v.charAt(length - 1)\n    };\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  var isValidDate$3 = core.utils.isValidDate;\n  /**\n   * Validate Malaysian identity card number\n   *\n   * @see https://en.wikipedia.org/wiki/Malaysian_identity_card\n   * @returns {ValidateResult}\n   */\n  function myId(value) {\n    if (!/^\\d{12}$/.test(value)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    // Validate date of birth\n    var year = parseInt(value.substr(0, 2), 10);\n    var month = parseInt(value.substr(2, 2), 10);\n    var day = parseInt(value.substr(4, 2), 10);\n    if (!isValidDate$3(year + 1900, month, day) && !isValidDate$3(year + 2000, month, day)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    // Validate place of birth\n    var placeOfBirth = value.substr(6, 2);\n    var notAvailablePlaces = ['17', '18', '19', '20', '69', '70', '73', '80', '81', '94', '95', '96', '97'];\n    return {\n      meta: {},\n      valid: notAvailablePlaces.indexOf(placeOfBirth) === -1\n    };\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  /**\n   * Validate Dutch national identification number (BSN)\n   *\n   * @see https://nl.wikipedia.org/wiki/Burgerservicenummer\n   * @returns {ValidateResult}\n   */\n  function nlId(value) {\n    if (value.length < 8) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    var v = value;\n    if (v.length === 8) {\n      v = \"0\".concat(v);\n    }\n    if (!/^[0-9]{4}[.]{0,1}[0-9]{2}[.]{0,1}[0-9]{3}$/.test(v)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    v = v.replace(/\\./g, '');\n    if (parseInt(v, 10) === 0) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    var sum = 0;\n    var length = v.length;\n    for (var i = 0; i < length - 1; i++) {\n      sum += (9 - i) * parseInt(v.charAt(i), 10);\n    }\n    sum = sum % 11;\n    if (sum === 10) {\n      sum = 0;\n    }\n    return {\n      meta: {},\n      valid: \"\".concat(sum) === v.charAt(length - 1)\n    };\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  /**\n   * Validate Norwegian identity number (Fødselsnummer)\n   *\n   * @see https://no.wikipedia.org/wiki/F%C3%B8dselsnummer\n   * @returns {ValidateResult}\n   */\n  function noId(value) {\n    if (!/^\\d{11}$/.test(value)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    // Calculate the first check digit\n    var firstCd = function firstCd(v) {\n      var weight = [3, 7, 6, 1, 8, 9, 4, 5, 2];\n      var sum = 0;\n      for (var i = 0; i < 9; i++) {\n        sum += weight[i] * parseInt(v.charAt(i), 10);\n      }\n      return 11 - sum % 11;\n    };\n    // Calculate the second check digit\n    var secondCd = function secondCd(v) {\n      var weight = [5, 4, 3, 2, 7, 6, 5, 4, 3, 2];\n      var sum = 0;\n      for (var i = 0; i < 10; i++) {\n        sum += weight[i] * parseInt(v.charAt(i), 10);\n      }\n      return 11 - sum % 11;\n    };\n    return {\n      meta: {},\n      valid: \"\".concat(firstCd(value)) === value.substr(-2, 1) && \"\".concat(secondCd(value)) === value.substr(-1)\n    };\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  /**\n   * Validate Peruvian identity number (CUI)\n   *\n   * @see https://es.wikipedia.org/wiki/Documento_Nacional_de_Identidad_(Per%C3%BA)\n   * @returns {ValidateResult}\n   */\n  function peId(value) {\n    if (!/^\\d{8}[0-9A-Z]*$/.test(value)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    if (value.length === 8) {\n      return {\n        meta: {},\n        valid: true\n      };\n    }\n    var weight = [3, 2, 7, 6, 5, 4, 3, 2];\n    var sum = 0;\n    for (var i = 0; i < 8; i++) {\n      sum += weight[i] * parseInt(value.charAt(i), 10);\n    }\n    var cd = sum % 11;\n    var checkDigit = [6, 5, 4, 3, 2, 1, 1, 0, 9, 8, 7][cd];\n    var checkChar = 'KJIHGFEDCBA'.charAt(cd);\n    return {\n      meta: {},\n      valid: value.charAt(8) === \"\".concat(checkDigit) || value.charAt(8) === checkChar\n    };\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  /**\n   * Validate Poland citizen number (PESEL)\n   *\n   * @see http://en.wikipedia.org/wiki/National_identification_number#Poland\n   * @see http://en.wikipedia.org/wiki/PESEL\n   * @returns {ValidateResult}\n   */\n  function plId(value) {\n    if (!/^[0-9]{11}$/.test(value)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    var sum = 0;\n    var length = value.length;\n    var weight = [1, 3, 7, 9, 1, 3, 7, 9, 1, 3, 7];\n    for (var i = 0; i < length - 1; i++) {\n      sum += weight[i] * parseInt(value.charAt(i), 10);\n    }\n    sum = sum % 10;\n    if (sum === 0) {\n      sum = 10;\n    }\n    sum = 10 - sum;\n    return {\n      meta: {},\n      valid: \"\".concat(sum) === value.charAt(length - 1)\n    };\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  var isValidDate$2 = core.utils.isValidDate;\n  /**\n   * Validate Romanian numerical personal code (CNP)\n   *\n   * @see http://en.wikipedia.org/wiki/National_identification_number#Romania\n   * @returns {ValidateResult}\n   */\n  function roId(value) {\n    if (!/^[0-9]{13}$/.test(value)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    var gender = parseInt(value.charAt(0), 10);\n    if (gender === 0 || gender === 7 || gender === 8) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    // Determine the date of birth\n    var year = parseInt(value.substr(1, 2), 10);\n    var month = parseInt(value.substr(3, 2), 10);\n    var day = parseInt(value.substr(5, 2), 10);\n    // The year of date is determined base on the gender\n    var centuries = {\n      1: 1900,\n      2: 1900,\n      3: 1800,\n      4: 1800,\n      5: 2000,\n      6: 2000 // Female born after 2000\n    };\n    if (day > 31 && month > 12) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    if (gender !== 9) {\n      year = centuries[gender + ''] + year;\n      if (!isValidDate$2(year, month, day)) {\n        return {\n          meta: {},\n          valid: false\n        };\n      }\n    }\n    // Validate the check digit\n    var sum = 0;\n    var weight = [2, 7, 9, 1, 4, 6, 3, 5, 8, 2, 7, 9];\n    var length = value.length;\n    for (var i = 0; i < length - 1; i++) {\n      sum += parseInt(value.charAt(i), 10) * weight[i];\n    }\n    sum = sum % 11;\n    if (sum === 10) {\n      sum = 1;\n    }\n    return {\n      meta: {},\n      valid: \"\".concat(sum) === value.charAt(length - 1)\n    };\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  /**\n   * @returns {ValidateResult}\n   */\n  function rsId(value) {\n    return {\n      meta: {},\n      valid: jmbg(value, 'RS')\n    };\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  var luhn$1 = core.algorithms.luhn;\n  var isValidDate$1 = core.utils.isValidDate;\n  /**\n   * Validate Swedish personal identity number (personnummer)\n   *\n   * @see http://en.wikipedia.org/wiki/Personal_identity_number_(Sweden)\n   * @returns {ValidateResult}\n   */\n  function seId(value) {\n    if (!/^[0-9]{10}$/.test(value) && !/^[0-9]{6}[-|+][0-9]{4}$/.test(value)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    var v = value.replace(/[^0-9]/g, '');\n    var year = parseInt(v.substr(0, 2), 10) + 1900;\n    var month = parseInt(v.substr(2, 2), 10);\n    var day = parseInt(v.substr(4, 2), 10);\n    if (!isValidDate$1(year, month, day)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    // Validate the last check digit\n    return {\n      meta: {},\n      valid: luhn$1(v)\n    };\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  /**\n   * @returns {ValidateResult}\n   */\n  function siId(value) {\n    return {\n      meta: {},\n      valid: jmbg(value, 'SI')\n    };\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  /**\n   * Validate San Marino citizen number\n   *\n   * @see http://en.wikipedia.org/wiki/National_identification_number#San_Marino\n   * @returns {ValidateResult}\n   */\n  function smId(value) {\n    return {\n      meta: {},\n      valid: /^\\d{5}$/.test(value)\n    };\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  /**\n   * Validate Thailand citizen number\n   *\n   * @see http://en.wikipedia.org/wiki/National_identification_number#Thailand\n   * @returns {ValidateResult}\n   */\n  function thId(value) {\n    if (value.length !== 13) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    var sum = 0;\n    for (var i = 0; i < 12; i++) {\n      sum += parseInt(value.charAt(i), 10) * (13 - i);\n    }\n    return {\n      meta: {},\n      valid: (11 - sum % 11) % 10 === parseInt(value.charAt(12), 10)\n    };\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  /**\n   * Validate Turkish Identification Number\n   *\n   * @see https://en.wikipedia.org/wiki/Turkish_Identification_Number\n   * @returns {ValidateResult}\n   */\n  function trId(value) {\n    if (value.length !== 11) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    var sum = 0;\n    for (var i = 0; i < 10; i++) {\n      sum += parseInt(value.charAt(i), 10);\n    }\n    return {\n      meta: {},\n      valid: sum % 10 === parseInt(value.charAt(10), 10)\n    };\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  /**\n   * Validate Taiwan identity card number\n   *\n   * @see https://en.wikipedia.org/wiki/National_identification_number#Taiwan\n   * @returns {ValidateResult}\n   */\n  function twId(value) {\n    var v = value.toUpperCase();\n    if (!/^[A-Z][12][0-9]{8}$/.test(v)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    var length = v.length;\n    var alphabet = 'ABCDEFGHJKLMNPQRSTUVXYWZIO';\n    var letterIndex = alphabet.indexOf(v.charAt(0)) + 10;\n    var letterValue = Math.floor(letterIndex / 10) + letterIndex % 10 * (length - 1);\n    var sum = 0;\n    for (var i = 1; i < length - 1; i++) {\n      sum += parseInt(v.charAt(i), 10) * (length - 1 - i);\n    }\n    return {\n      meta: {},\n      valid: (letterValue + sum + parseInt(v.charAt(length - 1), 10)) % 10 === 0\n    };\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  /**\n   * Validate Uruguayan identity document\n   *\n   * @see https://en.wikipedia.org/wiki/Identity_document#Uruguay\n   * @returns {ValidateResult}\n   */\n  function uyId(value) {\n    if (!/^\\d{8}$/.test(value)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    var weight = [2, 9, 8, 7, 6, 3, 4];\n    var sum = 0;\n    for (var i = 0; i < 7; i++) {\n      sum += parseInt(value.charAt(i), 10) * weight[i];\n    }\n    sum = sum % 10;\n    if (sum > 0) {\n      sum = 10 - sum;\n    }\n    return {\n      meta: {},\n      valid: \"\".concat(sum) === value.charAt(7)\n    };\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  var luhn = core.algorithms.luhn;\n  var isValidDate = core.utils.isValidDate;\n  /**\n   * Validate South African ID\n   *\n   * @see http://en.wikipedia.org/wiki/National_identification_number#South_Africa\n   * @returns {ValidateResult}\n   */\n  function zaId(value) {\n    if (!/^[0-9]{10}[0|1][8|9][0-9]$/.test(value)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    var year = parseInt(value.substr(0, 2), 10);\n    var currentYear = new Date().getFullYear() % 100;\n    var month = parseInt(value.substr(2, 2), 10);\n    var day = parseInt(value.substr(4, 2), 10);\n    year = year >= currentYear ? year + 1900 : year + 2000;\n    if (!isValidDate(year, month, day)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    // Validate the last check digit\n    return {\n      meta: {},\n      valid: luhn(value)\n    };\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  var format = core.utils.format,\n    removeUndefined = core.utils.removeUndefined;\n  function id() {\n    // Supported country codes\n    var COUNTRY_CODES = ['AR', 'BA', 'BG', 'BR', 'CH', 'CL', 'CN', 'CO', 'CZ', 'DK', 'EE', 'ES', 'FI', 'FR', 'HK', 'HR', 'ID', 'IE', 'IL', 'IS', 'KR', 'LT', 'LV', 'ME', 'MK', 'MX', 'MY', 'NL', 'NO', 'PE', 'PL', 'RO', 'RS', 'SE', 'SI', 'SK', 'SM', 'TH', 'TR', 'TW', 'UY', 'ZA'];\n    return {\n      /**\n       * Validate identification number in different countries\n       * @see http://en.wikipedia.org/wiki/National_identification_number\n       */\n      validate: function validate(input) {\n        if (input.value === '') {\n          return {\n            valid: true\n          };\n        }\n        var opts = Object.assign({}, {\n          message: ''\n        }, removeUndefined(input.options));\n        var country = input.value.substr(0, 2);\n        if ('function' === typeof opts.country) {\n          country = opts.country.call(this);\n        } else {\n          country = opts.country;\n        }\n        if (COUNTRY_CODES.indexOf(country) === -1) {\n          return {\n            valid: true\n          };\n        }\n        var result = {\n          meta: {},\n          valid: true\n        };\n        switch (country.toLowerCase()) {\n          case 'ar':\n            result = arId(input.value);\n            break;\n          case 'ba':\n            result = baId(input.value);\n            break;\n          case 'bg':\n            result = bgId(input.value);\n            break;\n          case 'br':\n            result = brId(input.value);\n            break;\n          case 'ch':\n            result = chId(input.value);\n            break;\n          case 'cl':\n            result = clId(input.value);\n            break;\n          case 'cn':\n            result = cnId(input.value);\n            break;\n          case 'co':\n            result = coId(input.value);\n            break;\n          case 'cz':\n            result = czId(input.value);\n            break;\n          case 'dk':\n            result = dkId(input.value);\n            break;\n          // Validate Estonian Personal Identification Code (isikukood)\n          // Use the same format as Lithuanian Personal Code\n          // See http://et.wikipedia.org/wiki/Isikukood\n          case 'ee':\n            result = ltId(input.value);\n            break;\n          case 'es':\n            result = esId(input.value);\n            break;\n          case 'fi':\n            result = fiId(input.value);\n            break;\n          case 'fr':\n            result = frId(input.value);\n            break;\n          case 'hk':\n            result = hkId(input.value);\n            break;\n          case 'hr':\n            result = hrId(input.value);\n            break;\n          case 'id':\n            result = idId(input.value);\n            break;\n          case 'ie':\n            result = ieId(input.value);\n            break;\n          case 'il':\n            result = ilId(input.value);\n            break;\n          case 'is':\n            result = isId(input.value);\n            break;\n          case 'kr':\n            result = krId(input.value);\n            break;\n          case 'lt':\n            result = ltId(input.value);\n            break;\n          case 'lv':\n            result = lvId(input.value);\n            break;\n          case 'me':\n            result = meId(input.value);\n            break;\n          case 'mk':\n            result = mkId(input.value);\n            break;\n          case 'mx':\n            result = mxId(input.value);\n            break;\n          case 'my':\n            result = myId(input.value);\n            break;\n          case 'nl':\n            result = nlId(input.value);\n            break;\n          case 'no':\n            result = noId(input.value);\n            break;\n          case 'pe':\n            result = peId(input.value);\n            break;\n          case 'pl':\n            result = plId(input.value);\n            break;\n          case 'ro':\n            result = roId(input.value);\n            break;\n          case 'rs':\n            result = rsId(input.value);\n            break;\n          case 'se':\n            result = seId(input.value);\n            break;\n          case 'si':\n            result = siId(input.value);\n            break;\n          // Validate Slovak national identifier number (RC)\n          // Slovakia uses the same format as Czech Republic\n          case 'sk':\n            result = czId(input.value);\n            break;\n          case 'sm':\n            result = smId(input.value);\n            break;\n          case 'th':\n            result = thId(input.value);\n            break;\n          case 'tr':\n            result = trId(input.value);\n            break;\n          case 'tw':\n            result = twId(input.value);\n            break;\n          case 'uy':\n            result = uyId(input.value);\n            break;\n          case 'za':\n            result = zaId(input.value);\n            break;\n        }\n        var message = format(input.l10n && input.l10n.id ? opts.message || input.l10n.id.country : opts.message, input.l10n && input.l10n.id && input.l10n.id.countries ? input.l10n.id.countries[country.toUpperCase()] : country.toUpperCase());\n        return Object.assign({}, {\n          message: message\n        }, result);\n      }\n    };\n  }\n  return id;\n});\n\n//# sourceURL=webpack://Materio/./libs/@form-validation/umd/validator-id/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./libs/@form-validation/umd/validator-id/index.js");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});