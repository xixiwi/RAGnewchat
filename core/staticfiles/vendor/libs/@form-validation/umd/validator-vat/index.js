/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@form-validation/core/lib/cjs/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@form-validation/core/lib/cjs/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\n/**\n * FormValidation (https://formvalidation.io)\n * The best validation library for JavaScript\n * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n */\n/**\n * Implement Luhn validation algorithm\n * Credit to https://gist.github.com/ShirtlessKirk/2134376\n *\n * @see http://en.wikipedia.org/wiki/Luhn\n * @param {string} value\n * @returns {boolean}\n */\nfunction luhn(value) {\n    var length = value.length;\n    var prodArr = [\n        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n        [0, 2, 4, 6, 8, 1, 3, 5, 7, 9],\n    ];\n    var mul = 0;\n    var sum = 0;\n    while (length--) {\n        sum += prodArr[mul][parseInt(value.charAt(length), 10)];\n        mul = 1 - mul;\n    }\n    return sum % 10 === 0 && sum > 0;\n}\n\n/**\n * FormValidation (https://formvalidation.io)\n * The best validation library for JavaScript\n * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n */\n/**\n * Implement modulus 11, 10 (ISO 7064) algorithm\n *\n * @param {string} value\n * @returns {boolean}\n */\nfunction mod11And10(value) {\n    var length = value.length;\n    var check = 5;\n    for (var i = 0; i < length; i++) {\n        check = ((((check || 10) * 2) % 11) + parseInt(value.charAt(i), 10)) % 10;\n    }\n    return check === 1;\n}\n\n/**\n * FormValidation (https://formvalidation.io)\n * The best validation library for JavaScript\n * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n */\n/**\n * Implements Mod 37, 36 (ISO 7064) algorithm\n *\n * @param {string} value\n * @param {string} [alphabet]\n * @returns {boolean}\n */\nfunction mod37And36(value, alphabet) {\n    if (alphabet === void 0) { alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'; }\n    var length = value.length;\n    var modulus = alphabet.length;\n    var check = Math.floor(modulus / 2);\n    for (var i = 0; i < length; i++) {\n        check = ((((check || modulus) * 2) % (modulus + 1)) + alphabet.indexOf(value.charAt(i))) % modulus;\n    }\n    return check === 1;\n}\n\n/**\n * FormValidation (https://formvalidation.io)\n * The best validation library for JavaScript\n * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n */\nfunction transform(input) {\n    return input\n        .split('')\n        .map(function (c) {\n        var code = c.charCodeAt(0);\n        // 65, 66, ..., 90 are the char code of A, B, ..., Z\n        return code >= 65 && code <= 90\n            ? // Replace A, B, C, ..., Z with 10, 11, ..., 35\n                code - 55\n            : c;\n    })\n        .join('')\n        .split('')\n        .map(function (c) { return parseInt(c, 10); });\n}\nfunction mod97And10(input) {\n    var digits = transform(input);\n    var temp = 0;\n    var length = digits.length;\n    for (var i = 0; i < length - 1; ++i) {\n        temp = ((temp + digits[i]) * 10) % 97;\n    }\n    temp += digits[length - 1];\n    return temp % 97 === 1;\n}\n\n/**\n * FormValidation (https://formvalidation.io)\n * The best validation library for JavaScript\n * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n */\n/**\n * Implement Verhoeff validation algorithm\n * Credit to Sergey Petushkov, 2014\n *\n * @see https://en.wikipedia.org/wiki/Verhoeff_algorithm\n * @param {string} value\n * @returns {boolean}\n */\nfunction verhoeff(value) {\n    // Multiplication table d\n    var d = [\n        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n        [1, 2, 3, 4, 0, 6, 7, 8, 9, 5],\n        [2, 3, 4, 0, 1, 7, 8, 9, 5, 6],\n        [3, 4, 0, 1, 2, 8, 9, 5, 6, 7],\n        [4, 0, 1, 2, 3, 9, 5, 6, 7, 8],\n        [5, 9, 8, 7, 6, 0, 4, 3, 2, 1],\n        [6, 5, 9, 8, 7, 1, 0, 4, 3, 2],\n        [7, 6, 5, 9, 8, 2, 1, 0, 4, 3],\n        [8, 7, 6, 5, 9, 3, 2, 1, 0, 4],\n        [9, 8, 7, 6, 5, 4, 3, 2, 1, 0],\n    ];\n    // Permutation table p\n    var p = [\n        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n        [1, 5, 7, 6, 2, 8, 3, 0, 9, 4],\n        [5, 8, 0, 3, 7, 9, 6, 1, 4, 2],\n        [8, 9, 1, 6, 0, 4, 3, 5, 2, 7],\n        [9, 4, 5, 3, 1, 2, 6, 8, 7, 0],\n        [4, 2, 8, 6, 5, 7, 3, 9, 0, 1],\n        [2, 7, 9, 3, 8, 0, 6, 4, 1, 5],\n        [7, 0, 4, 6, 9, 1, 3, 2, 5, 8],\n    ];\n    // Inverse table inv\n    var invertedArray = value.reverse();\n    var c = 0;\n    for (var i = 0; i < invertedArray.length; i++) {\n        c = d[c][p[i % 8][invertedArray[i]]];\n    }\n    return c === 0;\n}\n\n/**\n * FormValidation (https://formvalidation.io)\n * The best validation library for JavaScript\n * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n */\nvar index$1 = {\n    luhn: luhn,\n    mod11And10: mod11And10,\n    mod37And36: mod37And36,\n    mod97And10: mod97And10,\n    verhoeff: verhoeff,\n};\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\n\r\nfunction __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\n\n/**\n * FormValidation (https://formvalidation.io)\n * The best validation library for JavaScript\n * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n */\n/**\n * @param {HTMLElement} form The form element\n * @param {string} field The field name\n * @param {HTMLElement} element The field element\n * @param {HTMLElement[]} elements The list of elements which have the same name as `field`\n * @return {string}\n */\nfunction getFieldValue(form, field, element, elements) {\n    var type = (element.getAttribute('type') || '').toLowerCase();\n    var tagName = element.tagName.toLowerCase();\n    if (tagName === 'textarea') {\n        return element.value;\n    }\n    if (tagName === 'select') {\n        var select = element;\n        var index = select.selectedIndex;\n        return index >= 0 ? select.options.item(index).value : '';\n    }\n    if (tagName === 'input') {\n        if ('radio' === type || 'checkbox' === type) {\n            var checked = elements.filter(function (ele) { return ele.checked; }).length;\n            return checked === 0 ? '' : checked + '';\n        }\n        else {\n            return element.value;\n        }\n    }\n    return '';\n}\n\n/**\n * FormValidation (https://formvalidation.io)\n * The best validation library for JavaScript\n * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n */\nfunction emitter() {\n    return {\n        fns: {},\n        clear: function () {\n            this.fns = {};\n        },\n        emit: function (event) {\n            var args = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                args[_i - 1] = arguments[_i];\n            }\n            (this.fns[event] || []).map(function (handler) { return handler.apply(handler, args); });\n        },\n        off: function (event, func) {\n            if (this.fns[event]) {\n                var index = this.fns[event].indexOf(func);\n                if (index >= 0) {\n                    this.fns[event].splice(index, 1);\n                }\n            }\n        },\n        on: function (event, func) {\n            (this.fns[event] = this.fns[event] || []).push(func);\n        },\n    };\n}\n\n/**\n * FormValidation (https://formvalidation.io)\n * The best validation library for JavaScript\n * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n */\nfunction filter() {\n    return {\n        filters: {},\n        add: function (name, func) {\n            (this.filters[name] = this.filters[name] || []).push(func);\n        },\n        clear: function () {\n            this.filters = {};\n        },\n        execute: function (name, defaultValue, args) {\n            if (!this.filters[name] || !this.filters[name].length) {\n                return defaultValue;\n            }\n            var result = defaultValue;\n            var filters = this.filters[name];\n            var count = filters.length;\n            for (var i = 0; i < count; i++) {\n                result = filters[i].apply(result, args);\n            }\n            return result;\n        },\n        remove: function (name, func) {\n            if (this.filters[name]) {\n                this.filters[name] = this.filters[name].filter(function (f) { return f !== func; });\n            }\n        },\n    };\n}\n\n/**\n * FormValidation (https://formvalidation.io)\n * The best validation library for JavaScript\n * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n */\nvar Core = /** @class */ (function () {\n    function Core(form, fields) {\n        this.fields = {};\n        this.elements = {};\n        this.ee = emitter();\n        this.filter = filter();\n        this.plugins = {};\n        // Store the result of validation for each field\n        this.results = new Map();\n        this.validators = {};\n        this.form = form;\n        this.fields = fields;\n    }\n    Core.prototype.on = function (event, func) {\n        this.ee.on(event, func);\n        return this;\n    };\n    Core.prototype.off = function (event, func) {\n        this.ee.off(event, func);\n        return this;\n    };\n    Core.prototype.emit = function (event) {\n        var _a;\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        (_a = this.ee).emit.apply(_a, __spreadArray([event], args, false));\n        return this;\n    };\n    Core.prototype.registerPlugin = function (name, plugin) {\n        // Check if whether the plugin is registered\n        if (this.plugins[name]) {\n            throw new Error(\"The plguin \".concat(name, \" is registered\"));\n        }\n        // Install the plugin\n        plugin.setCore(this);\n        plugin.install();\n        this.plugins[name] = plugin;\n        return this;\n    };\n    Core.prototype.deregisterPlugin = function (name) {\n        var plugin = this.plugins[name];\n        if (plugin) {\n            plugin.uninstall();\n        }\n        delete this.plugins[name];\n        return this;\n    };\n    Core.prototype.enablePlugin = function (name) {\n        var plugin = this.plugins[name];\n        if (plugin) {\n            plugin.enable();\n        }\n        return this;\n    };\n    Core.prototype.disablePlugin = function (name) {\n        var plugin = this.plugins[name];\n        if (plugin) {\n            plugin.disable();\n        }\n        return this;\n    };\n    Core.prototype.isPluginEnabled = function (name) {\n        var plugin = this.plugins[name];\n        return plugin ? plugin.isPluginEnabled() : false;\n    };\n    Core.prototype.registerValidator = function (name, func) {\n        if (this.validators[name]) {\n            throw new Error(\"The validator \".concat(name, \" is registered\"));\n        }\n        this.validators[name] = func;\n        return this;\n    };\n    /**\n     * Add a filter\n     *\n     * @param {string} name The name of filter\n     * @param {Function} func The filter function\n     * @return {Core}\n     */\n    Core.prototype.registerFilter = function (name, func) {\n        this.filter.add(name, func);\n        return this;\n    };\n    /**\n     * Remove a filter\n     *\n     * @param {string} name The name of filter\n     * @param {Function} func The filter function\n     * @return {Core}\n     */\n    Core.prototype.deregisterFilter = function (name, func) {\n        this.filter.remove(name, func);\n        return this;\n    };\n    /**\n     * Execute a filter\n     *\n     * @param {string} name The name of filter\n     * @param {T} defaultValue The default value returns by the filter\n     * @param {array} args The filter arguments\n     * @returns {T}\n     */\n    Core.prototype.executeFilter = function (name, defaultValue, args) {\n        return this.filter.execute(name, defaultValue, args);\n    };\n    /**\n     * Add a field\n     *\n     * @param {string} field The field name\n     * @param {FieldOptions} options The field options. The options will be merged with the original validator rules\n     * if the field is already defined\n     * @return {Core}\n     */\n    Core.prototype.addField = function (field, options) {\n        var opts = Object.assign({}, {\n            selector: '',\n            validators: {},\n        }, options);\n        // Merge the options\n        this.fields[field] = this.fields[field]\n            ? {\n                selector: opts.selector || this.fields[field].selector,\n                validators: Object.assign({}, this.fields[field].validators, opts.validators),\n            }\n            : opts;\n        this.elements[field] = this.queryElements(field);\n        this.emit('core.field.added', {\n            elements: this.elements[field],\n            field: field,\n            options: this.fields[field],\n        });\n        return this;\n    };\n    /**\n     * Remove given field by name\n     *\n     * @param {string} field The field name\n     * @return {Core}\n     */\n    Core.prototype.removeField = function (field) {\n        if (!this.fields[field]) {\n            throw new Error(\"The field \".concat(field, \" validators are not defined. Please ensure the field is added first\"));\n        }\n        var elements = this.elements[field];\n        var options = this.fields[field];\n        delete this.elements[field];\n        delete this.fields[field];\n        this.emit('core.field.removed', {\n            elements: elements,\n            field: field,\n            options: options,\n        });\n        return this;\n    };\n    /**\n     * Validate all fields\n     *\n     * @return {Promise<string>}\n     */\n    Core.prototype.validate = function () {\n        var _this = this;\n        this.emit('core.form.validating', {\n            formValidation: this,\n        });\n        return this.filter.execute('validate-pre', Promise.resolve(), []).then(function () {\n            return Promise.all(Object.keys(_this.fields).map(function (field) { return _this.validateField(field); })).then(function (results) {\n                // `results` is an array of `Valid`, `Invalid` and `NotValidated`\n                switch (true) {\n                    case results.indexOf('Invalid') !== -1:\n                        _this.emit('core.form.invalid', {\n                            formValidation: _this,\n                        });\n                        return Promise.resolve('Invalid');\n                    case results.indexOf('NotValidated') !== -1:\n                        _this.emit('core.form.notvalidated', {\n                            formValidation: _this,\n                        });\n                        return Promise.resolve('NotValidated');\n                    default:\n                        _this.emit('core.form.valid', {\n                            formValidation: _this,\n                        });\n                        return Promise.resolve('Valid');\n                }\n            });\n        });\n    };\n    /**\n     * Validate a particular field\n     *\n     * @param {string} field The field name\n     * @return {Promise<string>}\n     */\n    Core.prototype.validateField = function (field) {\n        var _this = this;\n        // Stop validation process if the field is already validated\n        var result = this.results.get(field);\n        if (result === 'Valid' || result === 'Invalid') {\n            return Promise.resolve(result);\n        }\n        this.emit('core.field.validating', field);\n        var elements = this.elements[field];\n        if (elements.length === 0) {\n            this.emit('core.field.valid', field);\n            return Promise.resolve('Valid');\n        }\n        var type = elements[0].getAttribute('type');\n        if ('radio' === type || 'checkbox' === type || elements.length === 1) {\n            return this.validateElement(field, elements[0]);\n        }\n        else {\n            return Promise.all(elements.map(function (ele) { return _this.validateElement(field, ele); })).then(function (results) {\n                // `results` is an array of `Valid`, `Invalid` and `NotValidated`\n                switch (true) {\n                    case results.indexOf('Invalid') !== -1:\n                        _this.emit('core.field.invalid', field);\n                        _this.results.set(field, 'Invalid');\n                        return Promise.resolve('Invalid');\n                    case results.indexOf('NotValidated') !== -1:\n                        _this.emit('core.field.notvalidated', field);\n                        _this.results.delete(field);\n                        return Promise.resolve('NotValidated');\n                    default:\n                        _this.emit('core.field.valid', field);\n                        _this.results.set(field, 'Valid');\n                        return Promise.resolve('Valid');\n                }\n            });\n        }\n    };\n    /**\n     * Validate particular element\n     *\n     * @param {string} field The field name\n     * @param {HTMLElement} ele The field element\n     * @return {Promise<string>}\n     */\n    Core.prototype.validateElement = function (field, ele) {\n        var _this = this;\n        // Reset validation result\n        this.results.delete(field);\n        var elements = this.elements[field];\n        var ignored = this.filter.execute('element-ignored', false, [field, ele, elements]);\n        if (ignored) {\n            this.emit('core.element.ignored', {\n                element: ele,\n                elements: elements,\n                field: field,\n            });\n            return Promise.resolve('Ignored');\n        }\n        var validatorList = this.fields[field].validators;\n        this.emit('core.element.validating', {\n            element: ele,\n            elements: elements,\n            field: field,\n        });\n        var promises = Object.keys(validatorList).map(function (v) {\n            return function () { return _this.executeValidator(field, ele, v, validatorList[v]); };\n        });\n        return this.waterfall(promises)\n            .then(function (results) {\n            // `results` is an array of `Valid` or `Invalid`\n            var isValid = results.indexOf('Invalid') === -1;\n            _this.emit('core.element.validated', {\n                element: ele,\n                elements: elements,\n                field: field,\n                valid: isValid,\n            });\n            var type = ele.getAttribute('type');\n            if ('radio' === type || 'checkbox' === type || elements.length === 1) {\n                _this.emit(isValid ? 'core.field.valid' : 'core.field.invalid', field);\n            }\n            return Promise.resolve(isValid ? 'Valid' : 'Invalid');\n        })\n            .catch(function (reason) {\n            // reason is `NotValidated`\n            _this.emit('core.element.notvalidated', {\n                element: ele,\n                elements: elements,\n                field: field,\n            });\n            return Promise.resolve(reason);\n        });\n    };\n    /**\n     * Perform given validator on field\n     *\n     * @param {string} field The field name\n     * @param {HTMLElement} ele The field element\n     * @param {string} v The validator name\n     * @param {ValidatorOptions} opts The validator options\n     * @return {Promise<string>}\n     */\n    Core.prototype.executeValidator = function (field, ele, v, opts) {\n        var _this = this;\n        var elements = this.elements[field];\n        var name = this.filter.execute('validator-name', v, [v, field]);\n        opts.message = this.filter.execute('validator-message', opts.message, [this.locale, field, name]);\n        // Simply pass the validator if\n        // - it isn't defined yet\n        // - or the associated validator isn't enabled\n        if (!this.validators[name] || opts.enabled === false) {\n            this.emit('core.validator.validated', {\n                element: ele,\n                elements: elements,\n                field: field,\n                result: this.normalizeResult(field, name, { valid: true }),\n                validator: name,\n            });\n            return Promise.resolve('Valid');\n        }\n        var validator = this.validators[name];\n        // Get the field value\n        var value = this.getElementValue(field, ele, name);\n        var willValidate = this.filter.execute('field-should-validate', true, [field, ele, value, v]);\n        if (!willValidate) {\n            this.emit('core.validator.notvalidated', {\n                element: ele,\n                elements: elements,\n                field: field,\n                validator: v,\n            });\n            return Promise.resolve('NotValidated');\n        }\n        this.emit('core.validator.validating', {\n            element: ele,\n            elements: elements,\n            field: field,\n            validator: v,\n        });\n        // Perform validation\n        var result = validator().validate({\n            element: ele,\n            elements: elements,\n            field: field,\n            l10n: this.localization,\n            options: opts,\n            value: value,\n        });\n        // Check whether the result is a `Promise`\n        var isPromise = 'function' === typeof result['then'];\n        if (isPromise) {\n            return result.then(function (r) {\n                var data = _this.normalizeResult(field, v, r);\n                _this.emit('core.validator.validated', {\n                    element: ele,\n                    elements: elements,\n                    field: field,\n                    result: data,\n                    validator: v,\n                });\n                return data.valid ? 'Valid' : 'Invalid';\n            });\n        }\n        else {\n            var data = this.normalizeResult(field, v, result);\n            this.emit('core.validator.validated', {\n                element: ele,\n                elements: elements,\n                field: field,\n                result: data,\n                validator: v,\n            });\n            return Promise.resolve(data.valid ? 'Valid' : 'Invalid');\n        }\n    };\n    Core.prototype.getElementValue = function (field, ele, validator) {\n        var defaultValue = getFieldValue(this.form, field, ele, this.elements[field]);\n        return this.filter.execute('field-value', defaultValue, [defaultValue, field, ele, validator]);\n    };\n    // Some getter methods\n    Core.prototype.getElements = function (field) {\n        return this.elements[field];\n    };\n    Core.prototype.getFields = function () {\n        return this.fields;\n    };\n    Core.prototype.getFormElement = function () {\n        return this.form;\n    };\n    Core.prototype.getLocale = function () {\n        return this.locale;\n    };\n    Core.prototype.getPlugin = function (name) {\n        return this.plugins[name];\n    };\n    /**\n     * Update the field status\n     *\n     * @param {string} field The field name\n     * @param {string} status The new status\n     * @param {string} [validator] The validator name. If it isn't specified, all validators will be updated\n     * @return {Core}\n     */\n    Core.prototype.updateFieldStatus = function (field, status, validator) {\n        var _this = this;\n        var elements = this.elements[field];\n        var type = elements[0].getAttribute('type');\n        var list = 'radio' === type || 'checkbox' === type ? [elements[0]] : elements;\n        list.forEach(function (ele) { return _this.updateElementStatus(field, ele, status, validator); });\n        if (!validator) {\n            switch (status) {\n                case 'NotValidated':\n                    this.emit('core.field.notvalidated', field);\n                    this.results.delete(field);\n                    break;\n                case 'Validating':\n                    this.emit('core.field.validating', field);\n                    this.results.delete(field);\n                    break;\n                case 'Valid':\n                    this.emit('core.field.valid', field);\n                    this.results.set(field, 'Valid');\n                    break;\n                case 'Invalid':\n                    this.emit('core.field.invalid', field);\n                    this.results.set(field, 'Invalid');\n                    break;\n            }\n        }\n        else if (status === 'Invalid') {\n            // We need to mark the field as invalid because it doesn't pass the `validator`\n            this.emit('core.field.invalid', field);\n            this.results.set(field, 'Invalid');\n        }\n        return this;\n    };\n    /**\n     * Update the element status\n     *\n     * @param {string} field The field name\n     * @param {HTMLElement} ele The field element\n     * @param {string} status The new status\n     * @param {string} [validator] The validator name. If it isn't specified, all validators will be updated\n     * @return {Core}\n     */\n    Core.prototype.updateElementStatus = function (field, ele, status, validator) {\n        var _this = this;\n        var elements = this.elements[field];\n        var fieldValidators = this.fields[field].validators;\n        var validatorArr = validator ? [validator] : Object.keys(fieldValidators);\n        switch (status) {\n            case 'NotValidated':\n                validatorArr.forEach(function (v) {\n                    return _this.emit('core.validator.notvalidated', {\n                        element: ele,\n                        elements: elements,\n                        field: field,\n                        validator: v,\n                    });\n                });\n                this.emit('core.element.notvalidated', {\n                    element: ele,\n                    elements: elements,\n                    field: field,\n                });\n                break;\n            case 'Validating':\n                validatorArr.forEach(function (v) {\n                    return _this.emit('core.validator.validating', {\n                        element: ele,\n                        elements: elements,\n                        field: field,\n                        validator: v,\n                    });\n                });\n                this.emit('core.element.validating', {\n                    element: ele,\n                    elements: elements,\n                    field: field,\n                });\n                break;\n            case 'Valid':\n                validatorArr.forEach(function (v) {\n                    return _this.emit('core.validator.validated', {\n                        element: ele,\n                        elements: elements,\n                        field: field,\n                        result: {\n                            message: fieldValidators[v].message,\n                            valid: true,\n                        },\n                        validator: v,\n                    });\n                });\n                this.emit('core.element.validated', {\n                    element: ele,\n                    elements: elements,\n                    field: field,\n                    valid: true,\n                });\n                break;\n            case 'Invalid':\n                validatorArr.forEach(function (v) {\n                    return _this.emit('core.validator.validated', {\n                        element: ele,\n                        elements: elements,\n                        field: field,\n                        result: {\n                            message: fieldValidators[v].message,\n                            valid: false,\n                        },\n                        validator: v,\n                    });\n                });\n                this.emit('core.element.validated', {\n                    element: ele,\n                    elements: elements,\n                    field: field,\n                    valid: false,\n                });\n                break;\n        }\n        return this;\n    };\n    /**\n     * Reset the form. It also clears all the messages, hide the feedback icons, etc.\n     *\n     * @param {boolean} reset If true, the method resets field value to empty\n     * or remove `checked`, `selected` attributes\n     * @return {Core}\n     */\n    Core.prototype.resetForm = function (reset) {\n        var _this = this;\n        Object.keys(this.fields).forEach(function (field) { return _this.resetField(field, reset); });\n        this.emit('core.form.reset', {\n            formValidation: this,\n            reset: reset,\n        });\n        return this;\n    };\n    /**\n     * Reset the field. It also clears all the messages, hide the feedback icons, etc.\n     *\n     * @param {string} field The field name\n     * @param {boolean} reset If true, the method resets field value to empty\n     * or remove `checked`, `selected` attributes\n     * @return {Core}\n     */\n    Core.prototype.resetField = function (field, reset) {\n        // Reset the field element value if needed\n        if (reset) {\n            var elements = this.elements[field];\n            var type_1 = elements[0].getAttribute('type');\n            elements.forEach(function (ele) {\n                if ('radio' === type_1 || 'checkbox' === type_1) {\n                    ele.removeAttribute('selected');\n                    ele.removeAttribute('checked');\n                    ele.checked = false;\n                }\n                else {\n                    ele.setAttribute('value', '');\n                    if (ele instanceof HTMLInputElement || ele instanceof HTMLTextAreaElement) {\n                        ele.value = '';\n                    }\n                }\n            });\n        }\n        // Mark the field as not validated yet\n        this.updateFieldStatus(field, 'NotValidated');\n        this.emit('core.field.reset', {\n            field: field,\n            reset: reset,\n        });\n        return this;\n    };\n    /**\n     * Revalidate a particular field. It's useful when the field value is effected by third parties\n     * (for example, attach another UI library to the field).\n     * Since there isn't an automatic way for FormValidation to know when the field value is modified in those cases,\n     * we need to revalidate the field manually.\n     *\n     * @param {string} field The field name\n     * @return {Promise<string>}\n     */\n    Core.prototype.revalidateField = function (field) {\n        if (!this.fields[field]) {\n            return Promise.resolve('Ignored');\n        }\n        this.updateFieldStatus(field, 'NotValidated');\n        return this.validateField(field);\n    };\n    /**\n     * Disable particular validator for given field\n     *\n     * @param {string} field The field name\n     * @param {string} validator The validator name. If it isn't specified, all validators will be disabled\n     * @return {Core}\n     */\n    Core.prototype.disableValidator = function (field, validator) {\n        if (!this.fields[field]) {\n            return this;\n        }\n        var elements = this.elements[field];\n        this.toggleValidator(false, field, validator);\n        this.emit('core.validator.disabled', {\n            elements: elements,\n            field: field,\n            formValidation: this,\n            validator: validator,\n        });\n        return this;\n    };\n    /**\n     * Enable particular validator for given field\n     *\n     * @param {string} field The field name\n     * @param {string} validator The validator name. If it isn't specified, all validators will be enabled\n     * @return {Core}\n     */\n    Core.prototype.enableValidator = function (field, validator) {\n        if (!this.fields[field]) {\n            return this;\n        }\n        var elements = this.elements[field];\n        this.toggleValidator(true, field, validator);\n        this.emit('core.validator.enabled', {\n            elements: elements,\n            field: field,\n            formValidation: this,\n            validator: validator,\n        });\n        return this;\n    };\n    /**\n     * Update option of particular validator for given field\n     *\n     * @param {string} field The field name\n     * @param {string} validator The validator name\n     * @param {string} name The option's name\n     * @param {unknown} value The option's value\n     * @return {Core}\n     */\n    Core.prototype.updateValidatorOption = function (field, validator, name, value) {\n        if (this.fields[field] && this.fields[field].validators && this.fields[field].validators[validator]) {\n            this.fields[field].validators[validator][name] = value;\n        }\n        return this;\n    };\n    Core.prototype.setFieldOptions = function (field, options) {\n        this.fields[field] = options;\n        return this;\n    };\n    Core.prototype.destroy = function () {\n        var _this = this;\n        // Remove plugins and filters\n        Object.keys(this.plugins).forEach(function (id) { return _this.plugins[id].uninstall(); });\n        this.ee.clear();\n        this.filter.clear();\n        this.results.clear();\n        this.plugins = {};\n        return this;\n    };\n    Core.prototype.setLocale = function (locale, localization) {\n        this.locale = locale;\n        this.localization = localization;\n        return this;\n    };\n    Core.prototype.waterfall = function (promises) {\n        return promises.reduce(function (p, c) {\n            return p.then(function (res) {\n                return c().then(function (result) {\n                    res.push(result);\n                    return res;\n                });\n            });\n        }, Promise.resolve([]));\n    };\n    Core.prototype.queryElements = function (field) {\n        var selector = this.fields[field].selector\n            ? // Check if the selector is an ID selector which starts with `#`\n                '#' === this.fields[field].selector.charAt(0)\n                    ? \"[id=\\\"\".concat(this.fields[field].selector.substring(1), \"\\\"]\")\n                    : this.fields[field].selector\n            : \"[name=\\\"\".concat(field.replace(/\"/g, '\\\\\"'), \"\\\"]\");\n        return [].slice.call(this.form.querySelectorAll(selector));\n    };\n    Core.prototype.normalizeResult = function (field, validator, result) {\n        var opts = this.fields[field].validators[validator];\n        return Object.assign({}, result, {\n            message: result.message ||\n                (opts ? opts.message : '') ||\n                (this.localization && this.localization[validator] && this.localization[validator]['default']\n                    ? this.localization[validator]['default']\n                    : '') ||\n                \"The field \".concat(field, \" is not valid\"),\n        });\n    };\n    Core.prototype.toggleValidator = function (enabled, field, validator) {\n        var _this = this;\n        var validatorArr = this.fields[field].validators;\n        if (validator && validatorArr && validatorArr[validator]) {\n            this.fields[field].validators[validator].enabled = enabled;\n        }\n        else if (!validator) {\n            Object.keys(validatorArr).forEach(function (v) { return (_this.fields[field].validators[v].enabled = enabled); });\n        }\n        return this.updateFieldStatus(field, 'NotValidated', validator);\n    };\n    return Core;\n}());\nfunction formValidation(form, options) {\n    var opts = Object.assign({}, {\n        fields: {},\n        locale: 'en_US',\n        plugins: {},\n        init: function (_) { },\n    }, options);\n    var core = new Core(form, opts.fields);\n    core.setLocale(opts.locale, opts.localization);\n    // Register plugins\n    Object.keys(opts.plugins).forEach(function (name) { return core.registerPlugin(name, opts.plugins[name]); });\n    // It's the single point that users can do a particular task before adding fields\n    // Some initialization tasks must be done at that point\n    opts.init(core);\n    // and add fields\n    Object.keys(opts.fields).forEach(function (field) { return core.addField(field, opts.fields[field]); });\n    return core;\n}\n\n/**\n * FormValidation (https://formvalidation.io)\n * The best validation library for JavaScript\n * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n */\nvar Plugin = /** @class */ (function () {\n    function Plugin(opts) {\n        this.opts = opts;\n        this.isEnabled = true;\n    }\n    Plugin.prototype.setCore = function (core) {\n        this.core = core;\n        return this;\n    };\n    Plugin.prototype.enable = function () {\n        this.isEnabled = true;\n        this.onEnabled();\n        return this;\n    };\n    Plugin.prototype.disable = function () {\n        this.isEnabled = false;\n        this.onDisabled();\n        return this;\n    };\n    Plugin.prototype.isPluginEnabled = function () {\n        return this.isEnabled;\n    };\n    Plugin.prototype.onEnabled = function () { }; // eslint-disable-line @typescript-eslint/no-empty-function\n    Plugin.prototype.onDisabled = function () { }; // eslint-disable-line @typescript-eslint/no-empty-function\n    Plugin.prototype.install = function () { }; // eslint-disable-line @typescript-eslint/no-empty-function\n    Plugin.prototype.uninstall = function () { }; // eslint-disable-line @typescript-eslint/no-empty-function\n    return Plugin;\n}());\n\n/**\n * FormValidation (https://formvalidation.io)\n * The best validation library for JavaScript\n * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n */\n/**\n * Execute a callback function\n *\n * @param {Function | string} functionName Can be\n * - name of global function\n * - name of namespace function (such as A.B.C)\n * - a function\n * @param {any[]} args The callback arguments\n * @return {any}\n */\nfunction call(functionName, args) {\n    if ('function' === typeof functionName) {\n        return functionName.apply(this, args);\n    }\n    else if ('string' === typeof functionName) {\n        // Node that it doesn't support node.js based environment because we are trying to access `window`\n        var name_1 = functionName;\n        if ('()' === name_1.substring(name_1.length - 2)) {\n            name_1 = name_1.substring(0, name_1.length - 2);\n        }\n        var ns = name_1.split('.');\n        var func = ns.pop();\n        var context_1 = window;\n        for (var _i = 0, ns_1 = ns; _i < ns_1.length; _i++) {\n            var t = ns_1[_i];\n            context_1 = context_1[t];\n        }\n        return typeof context_1[func] === 'undefined' ? null : context_1[func].apply(this, args);\n    }\n}\n\n/**\n * FormValidation (https://formvalidation.io)\n * The best validation library for JavaScript\n * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n */\nvar addClass = function (element, classes) {\n    classes.split(' ').forEach(function (clazz) {\n        if (element.classList) {\n            element.classList.add(clazz);\n        }\n        else if (\" \".concat(element.className, \" \").indexOf(\" \".concat(clazz, \" \"))) {\n            element.className += \" \".concat(clazz);\n        }\n    });\n};\nvar removeClass = function (element, classes) {\n    classes.split(' ').forEach(function (clazz) {\n        element.classList\n            ? element.classList.remove(clazz)\n            : (element.className = element.className.replace(clazz, ''));\n    });\n};\nvar classSet = function (element, classes) {\n    var adding = [];\n    var removing = [];\n    Object.keys(classes).forEach(function (clazz) {\n        if (clazz) {\n            classes[clazz] ? adding.push(clazz) : removing.push(clazz);\n        }\n    });\n    // Always remove before adding class because there might be a class which belong to both sets.\n    // For example, the element will have class `a` after calling\n    //  ```\n    //  classSet(element, {\n    //      'a a1 a2': true,\n    //      'a b1 b2': false\n    //  })\n    //  ```\n    removing.forEach(function (clazz) { return removeClass(element, clazz); });\n    adding.forEach(function (clazz) { return addClass(element, clazz); });\n};\n\n/**\n * FormValidation (https://formvalidation.io)\n * The best validation library for JavaScript\n * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n */\nvar matches = function (element, selector) {\n    var nativeMatches = element.matches ||\n        element.webkitMatchesSelector ||\n        element['mozMatchesSelector'] ||\n        element['msMatchesSelector'];\n    if (nativeMatches) {\n        return nativeMatches.call(element, selector);\n    }\n    // In case `matchesselector` isn't supported (such as IE10)\n    // See http://caniuse.com/matchesselector\n    var nodes = [].slice.call(element.parentElement.querySelectorAll(selector));\n    return nodes.indexOf(element) >= 0;\n};\nvar closest = function (element, selector) {\n    var ele = element;\n    while (ele) {\n        if (matches(ele, selector)) {\n            break;\n        }\n        ele = ele.parentElement;\n    }\n    return ele;\n};\n\n/**\n * FormValidation (https://formvalidation.io)\n * The best validation library for JavaScript\n * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n */\nvar generateString = function (length) {\n    return Array(length)\n        .fill('')\n        .map(function (v) { return Math.random().toString(36).charAt(2); })\n        .join('');\n};\nvar fetch = function (url, options) {\n    var toQuery = function (obj) {\n        return Object.keys(obj)\n            .map(function (k) { return \"\".concat(encodeURIComponent(k), \"=\").concat(encodeURIComponent(obj[k])); })\n            .join('&');\n    };\n    return new Promise(function (resolve, reject) {\n        var opts = Object.assign({}, {\n            crossDomain: false,\n            headers: {},\n            method: 'GET',\n            params: {},\n        }, options);\n        // Build the params for GET request\n        var params = Object.keys(opts.params)\n            .map(function (k) { return \"\".concat(encodeURIComponent(k), \"=\").concat(encodeURIComponent(opts.params[k])); })\n            .join('&');\n        var hasQuery = url.indexOf('?') > -1;\n        var requestUrl = 'GET' === opts.method ? \"\".concat(url).concat(hasQuery ? '&' : '?').concat(params) : url;\n        if (opts.crossDomain) {\n            // User is making cross domain request\n            var script_1 = document.createElement('script');\n            // In some very fast systems, the different `Date.now()` invocations can return the same value\n            // which leads to the issue where there are multiple remove validators are used, for example.\n            // Appending it with a generated random string can fix the value\n            var callback_1 = \"___FormValidationFetch_\".concat(generateString(12), \"___\");\n            window[callback_1] = function (data) {\n                delete window[callback_1];\n                resolve(data);\n            };\n            script_1.src = \"\".concat(requestUrl).concat(hasQuery ? '&' : '?', \"callback=\").concat(callback_1);\n            script_1.async = true;\n            script_1.addEventListener('load', function () {\n                script_1.parentNode.removeChild(script_1);\n            });\n            script_1.addEventListener('error', function () { return reject; });\n            document.head.appendChild(script_1);\n        }\n        else {\n            var request_1 = new XMLHttpRequest();\n            request_1.open(opts.method, requestUrl);\n            // Set the headers\n            request_1.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n            if ('POST' === opts.method) {\n                request_1.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n            }\n            Object.keys(opts.headers).forEach(function (k) { return request_1.setRequestHeader(k, opts.headers[k]); });\n            request_1.addEventListener('load', function () {\n                // Cannot use arrow function here due to the `this` scope\n                resolve(JSON.parse(this.responseText));\n            });\n            request_1.addEventListener('error', function () { return reject; });\n            // GET request will ignore the passed data here\n            request_1.send(toQuery(opts.params));\n        }\n    });\n};\n\n/**\n * FormValidation (https://formvalidation.io)\n * The best validation library for JavaScript\n * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n */\n/**\n * Format a string\n * It's used to format the error message\n * format('The field must between %s and %s', [10, 20]) = 'The field must between 10 and 20'\n *\n * @param {string} message\n * @param {string|string[]} parameters\n * @returns {string}\n */\nvar format = function (message, parameters) {\n    var params = Array.isArray(parameters) ? parameters : [parameters];\n    var output = message;\n    params.forEach(function (p) {\n        output = output.replace('%s', p);\n    });\n    return output;\n};\n\n/**\n * FormValidation (https://formvalidation.io)\n * The best validation library for JavaScript\n * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n */\nvar hasClass = function (element, clazz) {\n    return element.classList\n        ? element.classList.contains(clazz)\n        : new RegExp(\"(^| )\".concat(clazz, \"( |$)\"), 'gi').test(element.className);\n};\n\n/**\n * FormValidation (https://formvalidation.io)\n * The best validation library for JavaScript\n * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n */\n/**\n * Validate a date\n *\n * @param {string} year The full year in 4 digits\n * @param {string} month The month number\n * @param {string} day The day number\n * @param {boolean} [notInFuture] If true, the date must not be in the future\n * @returns {boolean}\n */\nvar isValidDate = function (year, month, day, notInFuture) {\n    if (isNaN(year) || isNaN(month) || isNaN(day)) {\n        return false;\n    }\n    if (year < 1000 || year > 9999 || month <= 0 || month > 12) {\n        return false;\n    }\n    var numDays = [\n        31,\n        // Update the number of days in Feb of leap year\n        year % 400 === 0 || (year % 100 !== 0 && year % 4 === 0) ? 29 : 28,\n        31,\n        30,\n        31,\n        30,\n        31,\n        31,\n        30,\n        31,\n        30,\n        31,\n    ];\n    // Check the day\n    if (day <= 0 || day > numDays[month - 1]) {\n        return false;\n    }\n    if (notInFuture === true) {\n        var currentDate = new Date();\n        var currentYear = currentDate.getFullYear();\n        var currentMonth = currentDate.getMonth();\n        var currentDay = currentDate.getDate();\n        return (year < currentYear ||\n            (year === currentYear && month - 1 < currentMonth) ||\n            (year === currentYear && month - 1 === currentMonth && day < currentDay));\n    }\n    return true;\n};\n\n/**\n * FormValidation (https://formvalidation.io)\n * The best validation library for JavaScript\n * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n */\nvar removeUndefined = function (obj) {\n    return obj\n        ? Object.entries(obj).reduce(function (a, _a) {\n            var k = _a[0], v = _a[1];\n            return (v === undefined ? a : ((a[k] = v), a));\n        }, {})\n        : {};\n};\n\n/**\n * FormValidation (https://formvalidation.io)\n * The best validation library for JavaScript\n * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n */\nvar index = {\n    call: call,\n    classSet: classSet,\n    closest: closest,\n    fetch: fetch,\n    format: format,\n    hasClass: hasClass,\n    isValidDate: isValidDate,\n    removeUndefined: removeUndefined,\n};\n\nexports.Plugin = Plugin;\nexports.algorithms = index$1;\nexports.formValidation = formValidation;\nexports.utils = index;\n\n\n//# sourceURL=webpack://Materio/./node_modules/@form-validation/core/lib/cjs/index.js?");

/***/ }),

/***/ "./node_modules/@form-validation/core/lib/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@form-validation/core/lib/index.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * FormValidation (https://formvalidation.io)\n * The best validation library for JavaScript\n * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n */\n\n\n\nif (false) {} else {\n    module.exports = __webpack_require__(/*! ./cjs/index.js */ \"./node_modules/@form-validation/core/lib/cjs/index.js\");\n}\n\n\n//# sourceURL=webpack://Materio/./node_modules/@form-validation/core/lib/index.js?");

/***/ }),

/***/ "./libs/@form-validation/umd/validator-vat/index.js":
/*!**********************************************************!*\
  !*** ./libs/@form-validation/umd/validator-vat/index.js ***!
  \**********************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\n(function (global, factory) {\n  ( false ? 0 : _typeof(exports)) === 'object' && \"object\" !== 'undefined' ? module.exports = factory(__webpack_require__(/*! @form-validation/core */ \"./node_modules/@form-validation/core/lib/index.js\")) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! @form-validation/core */ \"./node_modules/@form-validation/core/lib/index.js\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : (0);\n})(this, function (core) {\n  'use strict';\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  /**\n   * Validate Argentinian VAT number\n   *\n   * @see https://es.wikipedia.org/wiki/Clave_%C3%9Anica_de_Identificaci%C3%B3n_Tributaria\n   * @returns {ValidateResult}\n   */\n  function arVat(value) {\n    // Replace `-` with empty\n    var v = value.replace('-', '');\n    if (/^AR[0-9]{11}$/.test(v)) {\n      v = v.substr(2);\n    }\n    if (!/^[0-9]{11}$/.test(v)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    var weight = [5, 4, 3, 2, 7, 6, 5, 4, 3, 2];\n    var sum = 0;\n    for (var i = 0; i < 10; i++) {\n      sum += parseInt(v.charAt(i), 10) * weight[i];\n    }\n    sum = 11 - sum % 11;\n    if (sum === 11) {\n      sum = 0;\n    }\n    return {\n      meta: {},\n      valid: \"\".concat(sum) === v.substr(10)\n    };\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  /**\n   * Validate Austrian VAT number\n   *\n   * @returns {ValidateResult}\n   */\n  function atVat(value) {\n    var v = value;\n    if (/^ATU[0-9]{8}$/.test(v)) {\n      v = v.substr(2);\n    }\n    if (!/^U[0-9]{8}$/.test(v)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    v = v.substr(1);\n    var weight = [1, 2, 1, 2, 1, 2, 1];\n    var sum = 0;\n    var temp = 0;\n    for (var i = 0; i < 7; i++) {\n      temp = parseInt(v.charAt(i), 10) * weight[i];\n      if (temp > 9) {\n        temp = Math.floor(temp / 10) + temp % 10;\n      }\n      sum += temp;\n    }\n    sum = 10 - (sum + 4) % 10;\n    if (sum === 10) {\n      sum = 0;\n    }\n    return {\n      meta: {},\n      valid: \"\".concat(sum) === v.substr(7, 1)\n    };\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  /**\n   * Validate Belgian VAT number\n   *\n   * @returns {ValidateResult}\n   */\n  function beVat(value) {\n    var v = value;\n    if (/^BE[0]?[0-9]{9}$/.test(v)) {\n      v = v.substr(2);\n    }\n    if (!/^[0]?[0-9]{9}$/.test(v)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    if (v.length === 9) {\n      v = \"0\".concat(v);\n    }\n    if (v.substr(1, 1) === '0') {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    var sum = parseInt(v.substr(0, 8), 10) + parseInt(v.substr(8, 2), 10);\n    return {\n      meta: {},\n      valid: sum % 97 === 0\n    };\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  var isValidDate$2 = core.utils.isValidDate;\n  /**\n   * Validate Bulgarian VAT number\n   *\n   * @returns {ValidateResult}\n   */\n  function bgVat(value) {\n    var v = value;\n    if (/^BG[0-9]{9,10}$/.test(v)) {\n      v = v.substr(2);\n    }\n    if (!/^[0-9]{9,10}$/.test(v)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    var sum = 0;\n    var i = 0;\n    // Legal entities\n    if (v.length === 9) {\n      for (i = 0; i < 8; i++) {\n        sum += parseInt(v.charAt(i), 10) * (i + 1);\n      }\n      sum = sum % 11;\n      if (sum === 10) {\n        sum = 0;\n        for (i = 0; i < 8; i++) {\n          sum += parseInt(v.charAt(i), 10) * (i + 3);\n        }\n        sum = sum % 11;\n      }\n      sum = sum % 10;\n      return {\n        meta: {},\n        valid: \"\".concat(sum) === v.substr(8)\n      };\n    } else {\n      // Physical persons, foreigners and others\n      // Validate Bulgarian national identification numbers\n      var isEgn = function isEgn(input) {\n        // Check the birth date\n        var year = parseInt(input.substr(0, 2), 10) + 1900;\n        var month = parseInt(input.substr(2, 2), 10);\n        var day = parseInt(input.substr(4, 2), 10);\n        if (month > 40) {\n          year += 100;\n          month -= 40;\n        } else if (month > 20) {\n          year -= 100;\n          month -= 20;\n        }\n        if (!isValidDate$2(year, month, day)) {\n          return false;\n        }\n        var weight = [2, 4, 8, 5, 10, 9, 7, 3, 6];\n        var s = 0;\n        for (var j = 0; j < 9; j++) {\n          s += parseInt(input.charAt(j), 10) * weight[j];\n        }\n        s = s % 11 % 10;\n        return \"\".concat(s) === input.substr(9, 1);\n      };\n      // Validate Bulgarian personal number of a foreigner\n      var isPnf = function isPnf(input) {\n        var weight = [21, 19, 17, 13, 11, 9, 7, 3, 1];\n        var s = 0;\n        for (var j = 0; j < 9; j++) {\n          s += parseInt(input.charAt(j), 10) * weight[j];\n        }\n        s = s % 10;\n        return \"\".concat(s) === input.substr(9, 1);\n      };\n      // Finally, consider it as a VAT number\n      var isVat = function isVat(input) {\n        var weight = [4, 3, 2, 7, 6, 5, 4, 3, 2];\n        var s = 0;\n        for (var j = 0; j < 9; j++) {\n          s += parseInt(input.charAt(j), 10) * weight[j];\n        }\n        s = 11 - s % 11;\n        if (s === 10) {\n          return false;\n        }\n        if (s === 11) {\n          s = 0;\n        }\n        return \"\".concat(s) === input.substr(9, 1);\n      };\n      return {\n        meta: {},\n        valid: isEgn(v) || isPnf(v) || isVat(v)\n      };\n    }\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  /**\n   * Validate Brazilian VAT number (CNPJ)\n   *\n   * @returns {ValidateResult}\n   */\n  function brVat(value) {\n    if (value === '') {\n      return {\n        meta: {},\n        valid: true\n      };\n    }\n    var cnpj = value.replace(/[^\\d]+/g, '');\n    if (cnpj === '' || cnpj.length !== 14) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    // Remove invalids CNPJs\n    if (cnpj === '00000000000000' || cnpj === '11111111111111' || cnpj === '22222222222222' || cnpj === '33333333333333' || cnpj === '44444444444444' || cnpj === '55555555555555' || cnpj === '66666666666666' || cnpj === '77777777777777' || cnpj === '88888888888888' || cnpj === '99999999999999') {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    // Validate verification digits\n    var length = cnpj.length - 2;\n    var numbers = cnpj.substring(0, length);\n    var digits = cnpj.substring(length);\n    var sum = 0;\n    var pos = length - 7;\n    var i;\n    for (i = length; i >= 1; i--) {\n      sum += parseInt(numbers.charAt(length - i), 10) * pos--;\n      if (pos < 2) {\n        pos = 9;\n      }\n    }\n    var result = sum % 11 < 2 ? 0 : 11 - sum % 11;\n    if (result !== parseInt(digits.charAt(0), 10)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    length = length + 1;\n    numbers = cnpj.substring(0, length);\n    sum = 0;\n    pos = length - 7;\n    for (i = length; i >= 1; i--) {\n      sum += parseInt(numbers.charAt(length - i), 10) * pos--;\n      if (pos < 2) {\n        pos = 9;\n      }\n    }\n    result = sum % 11 < 2 ? 0 : 11 - sum % 11;\n    return {\n      meta: {},\n      valid: result === parseInt(digits.charAt(1), 10)\n    };\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  /**\n   * Validate Swiss VAT number\n   *\n   * @returns {ValidateResult}\n   */\n  function chVat(value) {\n    var v = value;\n    if (/^CHE[0-9]{9}(MWST|TVA|IVA|TPV)?$/.test(v)) {\n      v = v.substr(2);\n    }\n    if (!/^E[0-9]{9}(MWST|TVA|IVA|TPV)?$/.test(v)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    v = v.substr(1);\n    var weight = [5, 4, 3, 2, 7, 6, 5, 4];\n    var sum = 0;\n    for (var i = 0; i < 8; i++) {\n      sum += parseInt(v.charAt(i), 10) * weight[i];\n    }\n    sum = 11 - sum % 11;\n    if (sum === 10) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    if (sum === 11) {\n      sum = 0;\n    }\n    return {\n      meta: {},\n      valid: \"\".concat(sum) === v.substr(8, 1)\n    };\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  /**\n   * Validate Cypriot VAT number\n   *\n   * @returns {ValidateResult}\n   */\n  function cyVat(value) {\n    var v = value;\n    if (/^CY[0-5|9][0-9]{7}[A-Z]$/.test(v)) {\n      v = v.substr(2);\n    }\n    if (!/^[0-5|9][0-9]{7}[A-Z]$/.test(v)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    // Do not allow to start with \"12\"\n    if (v.substr(0, 2) === '12') {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    // Extract the next digit and multiply by the counter.\n    var sum = 0;\n    var translation = {\n      0: 1,\n      1: 0,\n      2: 5,\n      3: 7,\n      4: 9,\n      5: 13,\n      6: 15,\n      7: 17,\n      8: 19,\n      9: 21\n    };\n    for (var i = 0; i < 8; i++) {\n      var temp = parseInt(v.charAt(i), 10);\n      if (i % 2 === 0) {\n        temp = translation[\"\".concat(temp)];\n      }\n      sum += temp;\n    }\n    return {\n      meta: {},\n      valid: \"\".concat('ABCDEFGHIJKLMNOPQRSTUVWXYZ'[sum % 26]) === v.substr(8, 1)\n    };\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  var isValidDate$1 = core.utils.isValidDate;\n  /**\n   * Validate Czech Republic VAT number\n   *\n   * @returns {ValidateResult}\n   */\n  function czVat(value) {\n    var v = value;\n    if (/^CZ[0-9]{8,10}$/.test(v)) {\n      v = v.substr(2);\n    }\n    if (!/^[0-9]{8,10}$/.test(v)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    var sum = 0;\n    var i = 0;\n    if (v.length === 8) {\n      // Do not allow to start with '9'\n      if (\"\".concat(v.charAt(0)) === '9') {\n        return {\n          meta: {},\n          valid: false\n        };\n      }\n      sum = 0;\n      for (i = 0; i < 7; i++) {\n        sum += parseInt(v.charAt(i), 10) * (8 - i);\n      }\n      sum = 11 - sum % 11;\n      if (sum === 10) {\n        sum = 0;\n      }\n      if (sum === 11) {\n        sum = 1;\n      }\n      return {\n        meta: {},\n        valid: \"\".concat(sum) === v.substr(7, 1)\n      };\n    } else if (v.length === 9 && \"\".concat(v.charAt(0)) === '6') {\n      sum = 0;\n      // Skip the first (which is 6)\n      for (i = 0; i < 7; i++) {\n        sum += parseInt(v.charAt(i + 1), 10) * (8 - i);\n      }\n      sum = 11 - sum % 11;\n      if (sum === 10) {\n        sum = 0;\n      }\n      if (sum === 11) {\n        sum = 1;\n      }\n      sum = [8, 7, 6, 5, 4, 3, 2, 1, 0, 9, 10][sum - 1];\n      return {\n        meta: {},\n        valid: \"\".concat(sum) === v.substr(8, 1)\n      };\n    } else if (v.length === 9 || v.length === 10) {\n      // Validate Czech birth number (Rodné číslo), which is also national identifier\n      var year = 1900 + parseInt(v.substr(0, 2), 10);\n      var month = parseInt(v.substr(2, 2), 10) % 50 % 20;\n      var day = parseInt(v.substr(4, 2), 10);\n      if (v.length === 9) {\n        if (year >= 1980) {\n          year -= 100;\n        }\n        if (year > 1953) {\n          return {\n            meta: {},\n            valid: false\n          };\n        }\n      } else if (year < 1954) {\n        year += 100;\n      }\n      if (!isValidDate$1(year, month, day)) {\n        return {\n          meta: {},\n          valid: false\n        };\n      }\n      // Check that the birth date is not in the future\n      if (v.length === 10) {\n        var check = parseInt(v.substr(0, 9), 10) % 11;\n        if (year < 1985) {\n          check = check % 10;\n        }\n        return {\n          meta: {},\n          valid: \"\".concat(check) === v.substr(9, 1)\n        };\n      }\n      return {\n        meta: {},\n        valid: true\n      };\n    }\n    return {\n      meta: {},\n      valid: false\n    };\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  var mod11And10$1 = core.algorithms.mod11And10;\n  /**\n   * Validate German VAT number\n   *\n   * @returns {ValidateResult}\n   */\n  function deVat(value) {\n    var v = value;\n    if (/^DE[0-9]{9}$/.test(v)) {\n      v = v.substr(2);\n    }\n    if (!/^[1-9][0-9]{8}$/.test(v)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    return {\n      meta: {},\n      valid: mod11And10$1(v)\n    };\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  /**\n   * Validate Danish VAT number\n   *\n   * @returns {ValidateResult}\n   */\n  function dkVat(value) {\n    var v = value;\n    if (/^DK[0-9]{8}$/.test(v)) {\n      v = v.substr(2);\n    }\n    if (!/^[0-9]{8}$/.test(v)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    var sum = 0;\n    var weight = [2, 7, 6, 5, 4, 3, 2, 1];\n    for (var i = 0; i < 8; i++) {\n      sum += parseInt(v.charAt(i), 10) * weight[i];\n    }\n    return {\n      meta: {},\n      valid: sum % 11 === 0\n    };\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  /**\n   * Validate Estonian VAT number\n   *\n   * @returns {ValidateResult}\n   */\n  function eeVat(value) {\n    var v = value;\n    if (/^EE[0-9]{9}$/.test(v)) {\n      v = v.substr(2);\n    }\n    if (!/^[0-9]{9}$/.test(v)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    var sum = 0;\n    var weight = [3, 7, 1, 3, 7, 1, 3, 7, 1];\n    for (var i = 0; i < 9; i++) {\n      sum += parseInt(v.charAt(i), 10) * weight[i];\n    }\n    return {\n      meta: {},\n      valid: sum % 10 === 0\n    };\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  /**\n   * Validate Spanish VAT number (NIF - Número de Identificación Fiscal)\n   * Can be:\n   * i) DNI (Documento nacional de identidad), for Spaniards\n   * ii) NIE (Número de Identificación de Extranjeros), for foreigners\n   * iii) CIF (Certificado de Identificación Fiscal), for legal entities and others\n   *\n   * @returns {ValidateResult}\n   */\n  function esVat(value) {\n    var v = value;\n    if (/^ES[0-9A-Z][0-9]{7}[0-9A-Z]$/.test(v)) {\n      v = v.substr(2);\n    }\n    if (!/^[0-9A-Z][0-9]{7}[0-9A-Z]$/.test(v)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    var dni = function dni(input) {\n      var check = parseInt(input.substr(0, 8), 10);\n      return \"\".concat('TRWAGMYFPDXBNJZSQVHLCKE'[check % 23]) === input.substr(8, 1);\n    };\n    var nie = function nie(input) {\n      var check = ['XYZ'.indexOf(input.charAt(0)), input.substr(1)].join('');\n      var cd = 'TRWAGMYFPDXBNJZSQVHLCKE'[parseInt(check, 10) % 23];\n      return \"\".concat(cd) === input.substr(8, 1);\n    };\n    var cif = function cif(input) {\n      var firstChar = input.charAt(0);\n      var check;\n      if ('KLM'.indexOf(firstChar) !== -1) {\n        // K: Spanish younger than 14 year old\n        // L: Spanish living outside Spain without DNI\n        // M: Granted the tax to foreigners who have no NIE\n        check = parseInt(input.substr(1, 8), 10);\n        check = 'TRWAGMYFPDXBNJZSQVHLCKE'[check % 23];\n        return \"\".concat(check) === input.substr(8, 1);\n      } else if ('ABCDEFGHJNPQRSUVW'.indexOf(firstChar) !== -1) {\n        var weight = [2, 1, 2, 1, 2, 1, 2];\n        var sum = 0;\n        var temp = 0;\n        for (var i = 0; i < 7; i++) {\n          temp = parseInt(input.charAt(i + 1), 10) * weight[i];\n          if (temp > 9) {\n            temp = Math.floor(temp / 10) + temp % 10;\n          }\n          sum += temp;\n        }\n        sum = 10 - sum % 10;\n        if (sum === 10) {\n          sum = 0;\n        }\n        return \"\".concat(sum) === input.substr(8, 1) || 'JABCDEFGHI'[sum] === input.substr(8, 1);\n      }\n      return false;\n    };\n    var first = v.charAt(0);\n    if (/^[0-9]$/.test(first)) {\n      return {\n        meta: {\n          type: 'DNI'\n        },\n        valid: dni(v)\n      };\n    } else if (/^[XYZ]$/.test(first)) {\n      return {\n        meta: {\n          type: 'NIE'\n        },\n        valid: nie(v)\n      };\n    } else {\n      return {\n        meta: {\n          type: 'CIF'\n        },\n        valid: cif(v)\n      };\n    }\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  /**\n   * Validate Finnish VAT number\n   *\n   * @returns {ValidateResult}\n   */\n  function fiVat(value) {\n    var v = value;\n    if (/^FI[0-9]{8}$/.test(v)) {\n      v = v.substr(2);\n    }\n    if (!/^[0-9]{8}$/.test(v)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    var weight = [7, 9, 10, 5, 8, 4, 2, 1];\n    var sum = 0;\n    for (var i = 0; i < 8; i++) {\n      sum += parseInt(v.charAt(i), 10) * weight[i];\n    }\n    return {\n      meta: {},\n      valid: sum % 11 === 0\n    };\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  var luhn$2 = core.algorithms.luhn;\n  /**\n   * Validate French VAT number (TVA - taxe sur la valeur ajoutée)\n   * It's constructed by a SIREN number, prefixed by two characters.\n   *\n   * @returns {ValidateResult}\n   */\n  function frVat(value) {\n    var v = value;\n    if (/^FR[0-9A-Z]{2}[0-9]{9}$/.test(v)) {\n      v = v.substr(2);\n    }\n    if (!/^[0-9A-Z]{2}[0-9]{9}$/.test(v)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    if (v.substr(2, 4) !== '000') {\n      return {\n        meta: {},\n        valid: luhn$2(v.substr(2))\n      };\n    }\n    if (/^[0-9]{2}$/.test(v.substr(0, 2))) {\n      // First two characters are digits\n      return {\n        meta: {},\n        valid: v.substr(0, 2) === \"\".concat(parseInt(v.substr(2) + '12', 10) % 97)\n      };\n    } else {\n      // The first characters cann't be O and I\n      var alphabet = '0123456789ABCDEFGHJKLMNPQRSTUVWXYZ';\n      var check = void 0;\n      // First one is digit\n      if (/^[0-9]$/.test(v.charAt(0))) {\n        check = alphabet.indexOf(v.charAt(0)) * 24 + alphabet.indexOf(v.charAt(1)) - 10;\n      } else {\n        check = alphabet.indexOf(v.charAt(0)) * 34 + alphabet.indexOf(v.charAt(1)) - 100;\n      }\n      return {\n        meta: {},\n        valid: (parseInt(v.substr(2), 10) + 1 + Math.floor(check / 11)) % 11 === check % 11\n      };\n    }\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  /**\n   * Validate United Kingdom VAT number\n   *\n   * @returns {ValidateResult}\n   */\n  function gbVat(value) {\n    var v = value;\n    if (/^GB[0-9]{9}$/.test(v) /* Standard */ || /^GB[0-9]{12}$/.test(v) /* Branches */ || /^GBGD[0-9]{3}$/.test(v) /* Government department */ || /^GBHA[0-9]{3}$/.test(v) /* Health authority */ || /^GB(GD|HA)8888[0-9]{5}$/.test(v)) {\n      v = v.substr(2);\n    }\n    if (!/^[0-9]{9}$/.test(v) && !/^[0-9]{12}$/.test(v) && !/^GD[0-9]{3}$/.test(v) && !/^HA[0-9]{3}$/.test(v) && !/^(GD|HA)8888[0-9]{5}$/.test(v)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    var length = v.length;\n    if (length === 5) {\n      var firstTwo = v.substr(0, 2);\n      var lastThree = parseInt(v.substr(2), 10);\n      return {\n        meta: {},\n        valid: 'GD' === firstTwo && lastThree < 500 || 'HA' === firstTwo && lastThree >= 500\n      };\n    } else if (length === 11 && ('GD8888' === v.substr(0, 6) || 'HA8888' === v.substr(0, 6))) {\n      if ('GD' === v.substr(0, 2) && parseInt(v.substr(6, 3), 10) >= 500 || 'HA' === v.substr(0, 2) && parseInt(v.substr(6, 3), 10) < 500) {\n        return {\n          meta: {},\n          valid: false\n        };\n      }\n      return {\n        meta: {},\n        valid: parseInt(v.substr(6, 3), 10) % 97 === parseInt(v.substr(9, 2), 10)\n      };\n    } else if (length === 9 || length === 12) {\n      var weight = [8, 7, 6, 5, 4, 3, 2, 10, 1];\n      var sum = 0;\n      for (var i = 0; i < 9; i++) {\n        sum += parseInt(v.charAt(i), 10) * weight[i];\n      }\n      sum = sum % 97;\n      var isValid = parseInt(v.substr(0, 3), 10) >= 100 ? sum === 0 || sum === 42 || sum === 55 : sum === 0;\n      return {\n        meta: {},\n        valid: isValid\n      };\n    }\n    return {\n      meta: {},\n      valid: true\n    };\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  /**\n   * Validate Greek VAT number\n   *\n   * @returns {ValidateResult}\n   */\n  function grVat(value) {\n    var v = value;\n    if (/^(GR|EL)[0-9]{9}$/.test(v)) {\n      v = v.substr(2);\n    }\n    if (!/^[0-9]{9}$/.test(v)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    if (v.length === 8) {\n      v = \"0\".concat(v);\n    }\n    var weight = [256, 128, 64, 32, 16, 8, 4, 2];\n    var sum = 0;\n    for (var i = 0; i < 8; i++) {\n      sum += parseInt(v.charAt(i), 10) * weight[i];\n    }\n    sum = sum % 11 % 10;\n    return {\n      meta: {},\n      valid: \"\".concat(sum) === v.substr(8, 1)\n    };\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  var mod11And10 = core.algorithms.mod11And10;\n  /**\n   * Validate Croatian VAT number\n   *\n   * @returns {ValidateResult}\n   */\n  function hrVat(value) {\n    var v = value;\n    if (/^HR[0-9]{11}$/.test(v)) {\n      v = v.substr(2);\n    }\n    if (!/^[0-9]{11}$/.test(v)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    return {\n      meta: {},\n      valid: mod11And10(v)\n    };\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  /**\n   * Validate Hungarian VAT number\n   *\n   * @returns {ValidateResult}\n   */\n  function huVat(value) {\n    var v = value;\n    if (/^HU[0-9]{8}$/.test(v)) {\n      v = v.substr(2);\n    }\n    if (!/^[0-9]{8}$/.test(v)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    var weight = [9, 7, 3, 1, 9, 7, 3, 1];\n    var sum = 0;\n    for (var i = 0; i < 8; i++) {\n      sum += parseInt(v.charAt(i), 10) * weight[i];\n    }\n    return {\n      meta: {},\n      valid: sum % 10 === 0\n    };\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  /**\n   * Validate Irish VAT number\n   *\n   * @returns {ValidateResult}\n   */\n  function ieVat(value) {\n    var v = value;\n    if (/^IE[0-9][0-9A-Z*+][0-9]{5}[A-Z]{1,2}$/.test(v)) {\n      v = v.substr(2);\n    }\n    if (!/^[0-9][0-9A-Z*+][0-9]{5}[A-Z]{1,2}$/.test(v)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    var getCheckDigit = function getCheckDigit(inp) {\n      var input = inp;\n      while (input.length < 7) {\n        input = \"0\".concat(input);\n      }\n      var alphabet = 'WABCDEFGHIJKLMNOPQRSTUV';\n      var sum = 0;\n      for (var i = 0; i < 7; i++) {\n        sum += parseInt(input.charAt(i), 10) * (8 - i);\n      }\n      sum += 9 * alphabet.indexOf(input.substr(7));\n      return alphabet[sum % 23];\n    };\n    // The first 7 characters are digits\n    if (/^[0-9]+$/.test(v.substr(0, 7))) {\n      // New system\n      return {\n        meta: {},\n        valid: v.charAt(7) === getCheckDigit(\"\".concat(v.substr(0, 7)).concat(v.substr(8)))\n      };\n    } else if ('ABCDEFGHIJKLMNOPQRSTUVWXYZ+*'.indexOf(v.charAt(1)) !== -1) {\n      // Old system\n      return {\n        meta: {},\n        valid: v.charAt(7) === getCheckDigit(\"\".concat(v.substr(2, 5)).concat(v.substr(0, 1)))\n      };\n    }\n    return {\n      meta: {},\n      valid: true\n    };\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  /**\n   * Validate Icelandic VAT (VSK) number\n   *\n   * @returns {ValidateResult}\n   */\n  function isVat(value) {\n    var v = value;\n    if (/^IS[0-9]{5,6}$/.test(v)) {\n      v = v.substr(2);\n    }\n    return {\n      meta: {},\n      valid: /^[0-9]{5,6}$/.test(v)\n    };\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  var luhn$1 = core.algorithms.luhn;\n  /**\n   * Validate Italian VAT number, which consists of 11 digits.\n   * - First 7 digits are a company identifier\n   * - Next 3 are the province of residence\n   * - The last one is a check digit\n   *\n   * @returns {ValidateResult}\n   */\n  function itVat(value) {\n    var v = value;\n    if (/^IT[0-9]{11}$/.test(v)) {\n      v = v.substr(2);\n    }\n    if (!/^[0-9]{11}$/.test(v)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    if (parseInt(v.substr(0, 7), 10) === 0) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    var lastThree = parseInt(v.substr(7, 3), 10);\n    if (lastThree < 1 || lastThree > 201 && lastThree !== 999 && lastThree !== 888) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    return {\n      meta: {},\n      valid: luhn$1(v)\n    };\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  /**\n   * Validate Lithuanian VAT number\n   * It can be:\n   * - 9 digits, for legal entities\n   * - 12 digits, for temporarily registered taxpayers\n   *\n   * @returns {ValidateResult}\n   */\n  function ltVat(value) {\n    var v = value;\n    if (/^LT([0-9]{7}1[0-9]|[0-9]{10}1[0-9])$/.test(v)) {\n      v = v.substr(2);\n    }\n    if (!/^([0-9]{7}1[0-9]|[0-9]{10}1[0-9])$/.test(v)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    var length = v.length;\n    var sum = 0;\n    var i;\n    for (i = 0; i < length - 1; i++) {\n      sum += parseInt(v.charAt(i), 10) * (1 + i % 9);\n    }\n    var check = sum % 11;\n    if (check === 10) {\n      // FIXME: Why we need calculation because `sum` isn't used anymore\n      sum = 0;\n      for (i = 0; i < length - 1; i++) {\n        sum += parseInt(v.charAt(i), 10) * (1 + (i + 2) % 9);\n      }\n    }\n    check = check % 11 % 10;\n    return {\n      meta: {},\n      valid: \"\".concat(check) === v.charAt(length - 1)\n    };\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  /**\n   * Validate Luxembourg VAT number\n   *\n   * @returns {ValidateResult}\n   */\n  function luVat(value) {\n    var v = value;\n    if (/^LU[0-9]{8}$/.test(v)) {\n      v = v.substring(2);\n    }\n    if (!/^[0-9]{8}$/.test(v)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    return {\n      meta: {},\n      valid: parseInt(v.substring(0, 6), 10) % 89 === parseInt(v.substring(6, 8), 10)\n    };\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  var isValidDate = core.utils.isValidDate;\n  /**\n   * Validate Latvian VAT number\n   *\n   * @returns {ValidateResult}\n   */\n  function lvVat(value) {\n    var v = value;\n    if (/^LV[0-9]{11}$/.test(v)) {\n      v = v.substr(2);\n    }\n    if (!/^[0-9]{11}$/.test(v)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    var first = parseInt(v.charAt(0), 10);\n    var length = v.length;\n    var sum = 0;\n    var weight = [];\n    var i;\n    if (first > 3) {\n      // Legal entity\n      sum = 0;\n      weight = [9, 1, 4, 8, 3, 10, 2, 5, 7, 6, 1];\n      for (i = 0; i < length; i++) {\n        sum += parseInt(v.charAt(i), 10) * weight[i];\n      }\n      sum = sum % 11;\n      return {\n        meta: {},\n        valid: sum === 3\n      };\n    } else {\n      // Check birth date\n      var day = parseInt(v.substr(0, 2), 10);\n      var month = parseInt(v.substr(2, 2), 10);\n      var year = parseInt(v.substr(4, 2), 10);\n      year = year + 1800 + parseInt(v.charAt(6), 10) * 100;\n      if (!isValidDate(year, month, day)) {\n        return {\n          meta: {},\n          valid: false\n        };\n      }\n      // Check personal code\n      sum = 0;\n      weight = [10, 5, 8, 4, 2, 1, 6, 3, 7, 9];\n      for (i = 0; i < length - 1; i++) {\n        sum += parseInt(v.charAt(i), 10) * weight[i];\n      }\n      sum = (sum + 1) % 11 % 10;\n      return {\n        meta: {},\n        valid: \"\".concat(sum) === v.charAt(length - 1)\n      };\n    }\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  /**\n   * Validate Maltese VAT number\n   *\n   * @returns {ValidateResult}\n   */\n  function mtVat(value) {\n    var v = value;\n    if (/^MT[0-9]{8}$/.test(v)) {\n      v = v.substr(2);\n    }\n    if (!/^[0-9]{8}$/.test(v)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    var weight = [3, 4, 6, 7, 8, 9, 10, 1];\n    var sum = 0;\n    for (var i = 0; i < 8; i++) {\n      sum += parseInt(v.charAt(i), 10) * weight[i];\n    }\n    return {\n      meta: {},\n      valid: sum % 37 === 0\n    };\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  var mod97And10 = core.algorithms.mod97And10;\n  /**\n   * Validate Dutch national identification number (BSN)\n   *\n   * @see https://nl.wikipedia.org/wiki/Burgerservicenummer\n   * @returns {ValidateResult}\n   */\n  function nlId(value) {\n    if (value.length < 8) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    var v = value;\n    if (v.length === 8) {\n      v = \"0\".concat(v);\n    }\n    if (!/^[0-9]{4}[.]{0,1}[0-9]{2}[.]{0,1}[0-9]{3}$/.test(v)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    v = v.replace(/\\./g, '');\n    if (parseInt(v, 10) === 0) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    var sum = 0;\n    var length = v.length;\n    for (var i = 0; i < length - 1; i++) {\n      sum += (9 - i) * parseInt(v.charAt(i), 10);\n    }\n    sum = sum % 11;\n    if (sum === 10) {\n      sum = 0;\n    }\n    return {\n      meta: {},\n      valid: \"\".concat(sum) === v.charAt(length - 1)\n    };\n  }\n  /**\n   * Validate Dutch VAT number\n   *\n   * @returns {ValidateResult}\n   */\n  function nlVat(value) {\n    var v = value;\n    if (/^NL[0-9]{9}B[0-9]{2}$/.test(v)) {\n      v = v.substr(2);\n    }\n    if (!/^[0-9]{9}B[0-9]{2}$/.test(v)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    var id = v.substr(0, 9);\n    return {\n      meta: {},\n      valid: nlId(id).valid || mod97And10(\"NL\".concat(v))\n    };\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  /**\n   * Validate Norwegian VAT number\n   *\n   * @see http://www.brreg.no/english/coordination/number.html\n   * @returns {ValidateResult}\n   */\n  function noVat(value) {\n    var v = value;\n    if (/^NO[0-9]{9}$/.test(v)) {\n      v = v.substr(2);\n    }\n    if (!/^[0-9]{9}$/.test(v)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    var weight = [3, 2, 7, 6, 5, 4, 3, 2];\n    var sum = 0;\n    for (var i = 0; i < 8; i++) {\n      sum += parseInt(v.charAt(i), 10) * weight[i];\n    }\n    sum = 11 - sum % 11;\n    if (sum === 11) {\n      sum = 0;\n    }\n    return {\n      meta: {},\n      valid: \"\".concat(sum) === v.substr(8, 1)\n    };\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  /**\n   * Validate Polish VAT number\n   *\n   * @returns {ValidateResult}\n   */\n  function plVat(value) {\n    var v = value;\n    if (/^PL[0-9]{10}$/.test(v)) {\n      v = v.substr(2);\n    }\n    if (!/^[0-9]{10}$/.test(v)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    var weight = [6, 5, 7, 2, 3, 4, 5, 6, 7, -1];\n    var sum = 0;\n    for (var i = 0; i < 10; i++) {\n      sum += parseInt(v.charAt(i), 10) * weight[i];\n    }\n    return {\n      meta: {},\n      valid: sum % 11 === 0\n    };\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  /**\n   * Validate Portuguese VAT number\n   *\n   * @returns {ValidateResult}\n   */\n  function ptVat(value) {\n    var v = value;\n    if (/^PT[0-9]{9}$/.test(v)) {\n      v = v.substr(2);\n    }\n    if (!/^[0-9]{9}$/.test(v)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    var weight = [9, 8, 7, 6, 5, 4, 3, 2];\n    var sum = 0;\n    for (var i = 0; i < 8; i++) {\n      sum += parseInt(v.charAt(i), 10) * weight[i];\n    }\n    sum = 11 - sum % 11;\n    if (sum > 9) {\n      sum = 0;\n    }\n    return {\n      meta: {},\n      valid: \"\".concat(sum) === v.substr(8, 1)\n    };\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  /**\n   * Validate Romanian VAT number\n   *\n   * @returns {ValidateResult}\n   */\n  function roVat(value) {\n    var v = value;\n    if (/^RO[1-9][0-9]{1,9}$/.test(v)) {\n      v = v.substr(2);\n    }\n    if (!/^[1-9][0-9]{1,9}$/.test(v)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    var length = v.length;\n    var weight = [7, 5, 3, 2, 1, 7, 5, 3, 2].slice(10 - length);\n    var sum = 0;\n    for (var i = 0; i < length - 1; i++) {\n      sum += parseInt(v.charAt(i), 10) * weight[i];\n    }\n    sum = 10 * sum % 11 % 10;\n    return {\n      meta: {},\n      valid: \"\".concat(sum) === v.substr(length - 1, 1)\n    };\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  /**\n   * Validate Serbian VAT number\n   *\n   * @returns {ValidateResult}\n   */\n  function rsVat(value) {\n    var v = value;\n    if (/^RS[0-9]{9}$/.test(v)) {\n      v = v.substr(2);\n    }\n    if (!/^[0-9]{9}$/.test(v)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    var sum = 10;\n    var temp = 0;\n    for (var i = 0; i < 8; i++) {\n      temp = (parseInt(v.charAt(i), 10) + sum) % 10;\n      if (temp === 0) {\n        temp = 10;\n      }\n      sum = 2 * temp % 11;\n    }\n    return {\n      meta: {},\n      valid: (sum + parseInt(v.substr(8, 1), 10)) % 10 === 1\n    };\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  /**\n   * Validate Russian VAT number (Taxpayer Identification Number - INN)\n   *\n   * @returns {ValidateResult}\n   */\n  function ruVat(value) {\n    var v = value;\n    if (/^RU([0-9]{10}|[0-9]{12})$/.test(v)) {\n      v = v.substr(2);\n    }\n    if (!/^([0-9]{10}|[0-9]{12})$/.test(v)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    var i = 0;\n    if (v.length === 10) {\n      var weight = [2, 4, 10, 3, 5, 9, 4, 6, 8, 0];\n      var sum = 0;\n      for (i = 0; i < 10; i++) {\n        sum += parseInt(v.charAt(i), 10) * weight[i];\n      }\n      sum = sum % 11;\n      if (sum > 9) {\n        sum = sum % 10;\n      }\n      return {\n        meta: {},\n        valid: \"\".concat(sum) === v.substr(9, 1)\n      };\n    } else if (v.length === 12) {\n      var weight1 = [7, 2, 4, 10, 3, 5, 9, 4, 6, 8, 0];\n      var weight2 = [3, 7, 2, 4, 10, 3, 5, 9, 4, 6, 8, 0];\n      var sum1 = 0;\n      var sum2 = 0;\n      for (i = 0; i < 11; i++) {\n        sum1 += parseInt(v.charAt(i), 10) * weight1[i];\n        sum2 += parseInt(v.charAt(i), 10) * weight2[i];\n      }\n      sum1 = sum1 % 11;\n      if (sum1 > 9) {\n        sum1 = sum1 % 10;\n      }\n      sum2 = sum2 % 11;\n      if (sum2 > 9) {\n        sum2 = sum2 % 10;\n      }\n      return {\n        meta: {},\n        valid: \"\".concat(sum1) === v.substr(10, 1) && \"\".concat(sum2) === v.substr(11, 1)\n      };\n    }\n    return {\n      meta: {},\n      valid: true\n    };\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  var luhn = core.algorithms.luhn;\n  /**\n   * Validate Swiss VAT number\n   *\n   * @returns {ValidateResult}\n   */\n  function seVat(value) {\n    var v = value;\n    if (/^SE[0-9]{10}01$/.test(v)) {\n      v = v.substr(2);\n    }\n    if (!/^[0-9]{10}01$/.test(v)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    v = v.substr(0, 10);\n    return {\n      meta: {},\n      valid: luhn(v)\n    };\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  /**\n   * Validate Slovenian VAT number\n   *\n   * @returns {ValidateResult}\n   */\n  function siVat(value) {\n    // The Slovenian VAT numbers don't start with zero\n    var res = value.match(/^(SI)?([1-9][0-9]{7})$/);\n    if (!res) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    var v = res[1] ? value.substr(2) : value;\n    var weight = [8, 7, 6, 5, 4, 3, 2];\n    var sum = 0;\n    for (var i = 0; i < 7; i++) {\n      sum += parseInt(v.charAt(i), 10) * weight[i];\n    }\n    sum = 11 - sum % 11;\n    if (sum === 10) {\n      sum = 0;\n    }\n    return {\n      meta: {},\n      valid: \"\".concat(sum) === v.substr(7, 1)\n    };\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  /**\n   * Validate Slovak VAT number\n   *\n   * @returns {ValidateResult}\n   */\n  function skVat(value) {\n    var v = value;\n    if (/^SK[1-9][0-9][(2-4)|(6-9)][0-9]{7}$/.test(v)) {\n      v = v.substr(2);\n    }\n    if (!/^[1-9][0-9][(2-4)|(6-9)][0-9]{7}$/.test(v)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    return {\n      meta: {},\n      valid: parseInt(v, 10) % 11 === 0\n    };\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  /**\n   * Validate Venezuelan VAT number (RIF)\n   *\n   * @returns {ValidateResult}\n   */\n  function veVat(value) {\n    var v = value;\n    if (/^VE[VEJPG][0-9]{9}$/.test(v)) {\n      v = v.substr(2);\n    }\n    if (!/^[VEJPG][0-9]{9}$/.test(v)) {\n      return {\n        meta: {},\n        valid: false\n      };\n    }\n    var types = {\n      E: 8,\n      G: 20,\n      J: 12,\n      P: 16,\n      V: 4\n    };\n    var weight = [3, 2, 7, 6, 5, 4, 3, 2];\n    var sum = types[v.charAt(0)];\n    for (var i = 0; i < 8; i++) {\n      sum += parseInt(v.charAt(i + 1), 10) * weight[i];\n    }\n    sum = 11 - sum % 11;\n    if (sum === 11 || sum === 10) {\n      sum = 0;\n    }\n    return {\n      meta: {},\n      valid: \"\".concat(sum) === v.substr(9, 1)\n    };\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  /**\n   * Validate South African VAT number\n   *\n   * @returns {ValidateResult}\n   */\n  function zaVat(value) {\n    var v = value;\n    if (/^ZA4[0-9]{9}$/.test(v)) {\n      v = v.substr(2);\n    }\n    return {\n      meta: {},\n      valid: /^4[0-9]{9}$/.test(v)\n    };\n  }\n\n  /**\n   * FormValidation (https://formvalidation.io)\n   * The best validation library for JavaScript\n   * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>\n   */\n  var format = core.utils.format,\n    removeUndefined = core.utils.removeUndefined;\n  function vat() {\n    // Supported country codes\n    var COUNTRY_CODES = ['AR', 'AT', 'BE', 'BG', 'BR', 'CH', 'CY', 'CZ', 'DE', 'DK', 'EE', 'EL', 'ES', 'FI', 'FR', 'GB', 'GR', 'HR', 'HU', 'IE', 'IS', 'IT', 'LT', 'LU', 'LV', 'MT', 'NL', 'NO', 'PL', 'PT', 'RO', 'RU', 'RS', 'SE', 'SK', 'SI', 'VE', 'ZA'];\n    return {\n      /**\n       * Validate an European VAT number\n       */\n      validate: function validate(input) {\n        var value = input.value;\n        if (value === '') {\n          return {\n            valid: true\n          };\n        }\n        var opts = Object.assign({}, {\n          message: ''\n        }, removeUndefined(input.options));\n        var country = value.substr(0, 2);\n        if ('function' === typeof opts.country) {\n          country = opts.country.call(this);\n        } else {\n          country = opts.country;\n        }\n        if (COUNTRY_CODES.indexOf(country) === -1) {\n          return {\n            valid: true\n          };\n        }\n        var result = {\n          meta: {},\n          valid: true\n        };\n        switch (country.toLowerCase()) {\n          case 'ar':\n            result = arVat(value);\n            break;\n          case 'at':\n            result = atVat(value);\n            break;\n          case 'be':\n            result = beVat(value);\n            break;\n          case 'bg':\n            result = bgVat(value);\n            break;\n          case 'br':\n            result = brVat(value);\n            break;\n          case 'ch':\n            result = chVat(value);\n            break;\n          case 'cy':\n            result = cyVat(value);\n            break;\n          case 'cz':\n            result = czVat(value);\n            break;\n          case 'de':\n            result = deVat(value);\n            break;\n          case 'dk':\n            result = dkVat(value);\n            break;\n          case 'ee':\n            result = eeVat(value);\n            break;\n          // EL is traditionally prefix of Greek VAT numbers\n          case 'el':\n            result = grVat(value);\n            break;\n          case 'es':\n            result = esVat(value);\n            break;\n          case 'fi':\n            result = fiVat(value);\n            break;\n          case 'fr':\n            result = frVat(value);\n            break;\n          case 'gb':\n            result = gbVat(value);\n            break;\n          case 'gr':\n            result = grVat(value);\n            break;\n          case 'hr':\n            result = hrVat(value);\n            break;\n          case 'hu':\n            result = huVat(value);\n            break;\n          case 'ie':\n            result = ieVat(value);\n            break;\n          case 'is':\n            result = isVat(value);\n            break;\n          case 'it':\n            result = itVat(value);\n            break;\n          case 'lt':\n            result = ltVat(value);\n            break;\n          case 'lu':\n            result = luVat(value);\n            break;\n          case 'lv':\n            result = lvVat(value);\n            break;\n          case 'mt':\n            result = mtVat(value);\n            break;\n          case 'nl':\n            result = nlVat(value);\n            break;\n          case 'no':\n            result = noVat(value);\n            break;\n          case 'pl':\n            result = plVat(value);\n            break;\n          case 'pt':\n            result = ptVat(value);\n            break;\n          case 'ro':\n            result = roVat(value);\n            break;\n          case 'rs':\n            result = rsVat(value);\n            break;\n          case 'ru':\n            result = ruVat(value);\n            break;\n          case 'se':\n            result = seVat(value);\n            break;\n          case 'si':\n            result = siVat(value);\n            break;\n          case 'sk':\n            result = skVat(value);\n            break;\n          case 've':\n            result = veVat(value);\n            break;\n          case 'za':\n            result = zaVat(value);\n            break;\n        }\n        var message = format(input.l10n && input.l10n.vat ? opts.message || input.l10n.vat.country : opts.message, input.l10n && input.l10n.vat && input.l10n.vat.countries ? input.l10n.vat.countries[country.toUpperCase()] : country.toUpperCase());\n        return Object.assign({}, {\n          message: message\n        }, result);\n      }\n    };\n  }\n  return vat;\n});\n\n//# sourceURL=webpack://Materio/./libs/@form-validation/umd/validator-vat/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./libs/@form-validation/umd/validator-vat/index.js");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});